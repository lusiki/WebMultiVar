summarize(mean_mass_g = round(mean(mass_g),2)
fish %>%
fish %>%
group_by(species) %>%
summarize(mean_mass_g = round(mean(mass_g),2))
lm(mass_g ~ species, data = fish)
lm(mass_g ~ species + 0, data = fish)
View(fish)
fish <- read.table("http://www.amstat.org/publications/jse/datasets/fishcatch.dat.txt ")
colnames(fish) <- c("obs","species","mass_g","len1","len2","len3"
,"height.pct","width.pct","sex")
fish$species <- factor(fish$species, levels = c(1:7),
labels = c("Common Bream","Whitefish","Roach","Silver Bream"
,"Smelt","Pike","Perch"))
View(fish)
# Do not modify the following code:
fish <- filter(fish, sex != "NA") %>% select(species,mass_g,length_cm) %>% slice(-1)
fish <- read.table("http://www.amstat.org/publications/jse/datasets/fishcatch.dat.txt ")
colnames(fish) <- c("obs","species","mass_g","length_cm","len2","len3"
,"height.pct","width.pct","sex")
fish$species <- factor(fish$species, levels = c(1:7),
labels = c("Common Bream","Whitefish","Roach","Silver Bream"
,"Smelt","Pike","Perch"))
# Do not modify the following code:
fish <- filter(fish, sex != "NA") %>% select(species,mass_g,length_cm) %>% slice(-1)
View(fish)
bream <- fish %>%
filter(str_detect(species,"Bream"))
View(bream)
head(bream,10)
mdl_mass_vs_length <- lm(mass_g ~ length_cm, data = bream)
mdl_mass_vs_length
predict(tezina_vs_visina, nezavisne_vars)
nezavisne_vars <- tibble(length_cm = 20:40)
nezavisne_vars
predict(tezina_vs_visina, nezavisne_vars)
predict(tezina_vs_visina, nezavisne_vars)
tezina_vs_visina <- lm(mass_g ~ length_cm, data = bream)
tezina_vs_visina
predict(tezina_vs_visina, nezavisne_vars)
prediction_data <- explanatory_data %>%
mutate(mass_g = predict(tezina_vs_visina, nezavisne_vars))
prediction_data <- nezavisne_vars %>%
mutate(mass_g = predict(tezina_vs_visina, nezavisne_vars))
prediction_data
mali_bream <- tibble(length_cm = 10)
mali_bream %>%
mutate(mass_g = predict(tezina_vs_visina, mali_bream))
coefficients(tezina_vs_visina)
# jednako kao
explanatory_data <- bream %>% select(length_cm)
predict(tezina_vs_visina, explanatory_data)
residuals(tezina_vs_visina)
# ekvivalentno:
bream$mass_g - fitted(tezina_vs_visina)
library(broom)
tidy(tezina_vs_visina) # napravi tibble (dframe) procjene
augment(tezina_vs_visina)
View(fish)
# "Perch" vrsta ribe
```{r}
perch <- fish %>%
filter(species == "Perch")
head(perch,8)
ggplot(perch, aes(length_cm, mass_g)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
mdl_perch <- lm(mass_g ~ I(length_cm ^ 3), data = perch)
head(prediction_data,8)
library(gridExtra)
gg1 <- ggplot(perch, aes(length_cm ^ 3, mass_g)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_point(data = prediction_data, color = "blue") +
ggtitle("Perch")
gg2 <- ggplot(perch, aes(length_cm, mass_g)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_point(data = prediction_data, color = "blue")+
ggtitle("Bream")
library(gridExtra)
grid.arrange(gg1, gg2, ncol = 2)
mdl_bream %>%
glance()
mdl_bream <- lm(mass_g ~ length_cm, data = bream)
summary(mdl_bream) # Vidi R-squared
mdl_bream %>%
glance()
# Izvuci koeficijent determinacije
mdl_bream %>%
glance() %>%
pull(r.squared)
bream %>%
mutate(residuals_sq = residuals(mdl_bream) ^ 2)
# Izbacivanje opservacija sa visokom "polugom"
install.packages("ggfortify")
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=T, echo=T, warning=F, message=F
)
knitr::opts_hooks$set(fig.callout = function(options) {
if (options$fig.callout) {
options$echo <- FALSE
options$out.height <- "99%"
options$fig.width <- 16
options$fig.height <- 8
}
options
})
# Koristimo "marketing" podatkovni skup iz "datarium" paketa
library(datarium) # učitaj paket
data("marketing") # učitaj podatke
# Podatci se odnose na prodajni efekt ulaganja u promidžbu na youtube, facebook i novinske oglase
head(marketing,10) # pogledaj podatke
# Procijeni model u R
model <- lm(sales ~ youtube + facebook + newspaper, data = marketing)
```
model <- lm(sales ~ youtube + facebook + newspaper, data = marketing)
# Rezultati modela
summary(model)
model$coefficents
str(model)
model$r.squared
summary(model)$r.squared
summary(model)$coefficients
summary(model)$coefficients
fish <- read.table("http://www.amstat.org/publications/jse/datasets/fishcatch.dat.txt ")
View(fish)
colnames(fish) <- c("obs","species","mass_g","length_cm","len2","len3"
,"height_cm","width.pct","sex")
fish$species <- factor(fish$species, levels = c(1:7),
labels = c("Common Bream","Whitefish","Roach","Silver Bream"
,"Smelt","Pike","Perch"))
# Do not modify the following code:
fish <- filter(fish, sex != "NA") %>% select(species,mass_g,length_cm) %>% slice(-1)
library(tidyverse)  # data manipulation and visualization
library(gridExtra)  # plot arrangement
library(ggplot2)
library(tidyverse)
library(dplyr)
# Do not modify the following code:
fish <- filter(fish, sex != "NA") %>% select(species,mass_g,length_cm) %>% slice(-1)
head(fish,10)
head(sample_n(fish,10),12)
fish <- read.table("http://www.amstat.org/publications/jse/datasets/fishcatch.dat.txt ")
colnames(fish) <- c("obs","species","mass_g","length_cm","len2","len3"
,"height_cm","width.pct","sex")
fish$species <- factor(fish$species, levels = c(1:7),
labels = c("Common Bream","Whitefish","Roach","Silver Bream"
,"Smelt","Pike","Perch"))
# Do not modify the following code:
fish <- filter(fish, sex != "NA") %>% select(species,mass_g,length_cm,height_cm) %>% slice(-1)
head(sample_n(fish,10),12)
library(plot3D)
scatter3D(fish$length_cm, fish$height_cm, fish$mass_g)
fish %$%
scatter3D(length_cm, height_cm, mass_g)
head(explanatory_data,4)
explanatory_data <- expand_grid(
length_cm = seq(5, 60, 5),
height_cm = seq(2, 20, 2))
head(explanatory_data,4)
prediction_data <- explanatory_data %>%
mutate(mass_g = predict(mdl_mass_vs_both, explanatory_data))
prediction_data <- explanatory_data %>%
mutate(mass_g = predict(mdl_mass_vs_both, explanatory_data))
mdl_mass_vs_both <- lm(mass_g ~ length_cm + height_cm, data = fish)
prediction_data <- explanatory_data %>%
mutate(mass_g = predict(mdl_mass_vs_both, explanatory_data))
head(prediction_data,4)
nezavisne_vars <- tibble(length_cm = 20:40)
View(nezavisne_vars)
mali_bream <- tibble(length_cm = 10)
View(mali_bream)
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=T, echo=T, warning=F, message=F
)
knitr::opts_hooks$set(fig.callout = function(options) {
if (options$fig.callout) {
options$echo <- FALSE
options$out.height <- "99%"
options$fig.width <- 16
options$fig.height <- 8
}
options
})
knitr::include_graphics("../Foto/txt1.png")
library(RCurl)
x <- getURL("https://github.com/marcdotson/tidy-text-analysis/blob/master/Roomba%20650%20Amazon%20Reviews.csv")
x <- getURL("https://github.com/marcdotson/tidy-text-analysis/blob/master/Roomba 650 Amazon Reviews.csv")
link <-paste0("https://github.com/marcdotson/tidy-text-analysis/blob/master/Roomba%20650%20Amazon%20Reviews.csv")
webpage <- read_html(link)
library(rvest)
link <-paste0("https://github.com/marcdotson/tidy-text-analysis/blob/master/Roomba%20650%20Amazon%20Reviews.csv")
webpage <- read_html(link)
data <- html_nodes(webpage,"/html/body/div[4]/div/main/div[2]/div/div/div[3]/div[2]/div[2]/table")
data <- html_nodes(webpage,".js-csv-data")
table<- html_table(data[[1]],header = FALSE)
View(table)
table<- html_table(data[[1]],header = TRUE)
View(table)
table<- html_table(data[[1]],header = TRUE)[,-1]
View(table)
str(table)
write.csv2(table, "../Podatci/RoombaRev.csv")
head(table,8)
head(table,8)
head(table,8)
library(tidyverse)  # data manipulation and visualization
library(gridExtra)  # plot arrangement
library(ggplot2)
library(tidyverse)
library(dplyr)
library(tidyr)
recenzije_Dta<- html_table(data[[1]],header = TRUE)[,-1]
head(recenzije_Dta,8)
recenzije_Dta %>%
filter(product == "iRobot Roomba 650 for Pets") %>%
summarize(stars_mean = mean(stars))
head(recenzije_Dta,8)
recenzije_Dta %>%
filter(Product == "iRobot Roomba 650 for Pets") %>%
summarize(stars_mean = mean(stars))
recenzije_Dta %>%
filter(Product == "iRobot Roomba 650 for Pets") %>%
summarize(stars_mean = mean(Stars))
# group_by() + summarize()
recenzije_Dta %>%
group_by(Product) %>%
summarize(stars_mean = mean(Stars))
# group_by() + summarize()
recenzije_Dta %>%
group_by(Product) %>%
summarize(stars_mean = mean(Stars))
View(recenzije_Dta)
review_data %>%
group_by(Product) %>%
summarize(review_mean = mean(Review))
recenzije_Dta %>%
group_by(Product) %>%
summarize(review_mean = mean(Review))
review_data <- read_csv("../Podatci/Roomba Reviews.csv")
recenzije_Dta <- read_csv("../Podatci/Roomba Reviews.csv")
recenzije_Dta
# filter() + summarize()
recenzije_Dta %>%
filter(Product == "iRobot Roomba 650 for Pets") %>%
summarize(stars_mean = mean(Stars))
# group_by() + summarize()
recenzije_Dta %>%
group_by(Product) %>%
summarize(stars_mean = mean(Stars))
# nestrukturirani podatci
recenzije_Dta %>%
group_by(Product) %>%
summarize(review_mean = mean(Review))
recenzije_Dta %>%
summarize(number_rows = n())
str(recenzije_Dta)
glimpse(recenzije_Dta)
recenzije_Dta %>%
group_by(Product) %>%
summarize(number_rows = n())
# count()
recenzije_Dta %>%
count(product)
# count()
recenzije_Dta %>%
count(product)
# count()
recenzije_Dta %>%
count(Product)
recenzije_Dta %>%
count(Product) %>%
arrange(desc(n))
knitr::include_graphics("../Foto/txt2.png")
# unnest_tokens() funkcija
tidy_review <- recenzije_Dta %>%
unnest_tokens(word, review)
# unnest_tokens() funkcija
tidy_review <- recenzije_Dta %>%
unnest_tokens(word, Review)
# unnest_tokens() funkcija
library(tidytext)
# unnest_tokens() funkcija
library(tidytext)
tidy_review <- recenzije_Dta %>%
unnest_tokens(word, Review)
tidy_review
head(tidy_review,8)
tidy_review %>%
count(word) %>%
arrange(desc(n))
tidy_review2 <- review_data %>%
unnest_tokens(word, Review) %>%
anti_join(stop_words)
tidy_review2
stop_words
head(stop_words,12)
tidy_review2 %>%
count(word) %>%
arrange(desc(n))
View(review_data)
```{r, fig.height=4}
word_counts <- tidy_review %>%
count(word) %>%
arrange(desc(n))
ggplot(word_counts, aes(x = word, y = n)) +
geom_col()
word_counts <- tidy_review %>%
count(word) %>%
arrange(desc(n)) %>% filter(n<2000)
ggplot(word_counts, aes(x = word, y = n)) +
geom_col()
word_counts2 <- tidy_review %>%
count(word) %>%
filter(n > 300)
word_counts2 <- tidy_review %>%
count(word) %>%
filter(n > 300) %>%
arrange(desc(n))
word_counts2
tidy_review <- recenzije_Dta %>%
mutate(id = row_number()) %>%
unnest_tokens(word, review) %>%
anti_join(stop_words)
tidy_review <- recenzije_Dta %>%
mutate(id = row_number()) %>%
unnest_tokens(word, review) %>%
anti_join(stop_words)
tidy_review <- recenzije_Dta %>%
mutate(id = row_number()) %>%
unnest_tokens(word, Review) %>%
anti_join(stop_words)
word_counts2 <- tidy_review %>%
count(word) %>%
filter(n > 300) %>%
arrange(desc(n))
word_counts2 <- tidy_review %>%
count(word) %>%
filter(n > 300) %>%
arrange(desc(n))
head(word_counts2,8)
# zekreni osi pomoću coord_flip()
ggplot(word_counts2, aes(x = word, y = n)) +
geom_col() +
coord_flip() +
ggtitle("Review Word Counts")
```{r}
custom_stop_words <- tribble(
~word, ~lexicon,
"roomba", "CUSTOM",
"2", "CUSTOM"
)
stop_words2 <- stop_words %>%
bind_rows(custom_stop_words)
custom_stop_words <- tribble(
~word, ~lexicon,
"roomba", "CUSTOM",
"2", "CUSTOM"
)
stop_words2 <- stop_words %>%
bind_rows(custom_stop_words)
tidy_review <- review_data %>%
mutate(id = row_number()) %>%
select(id, date, product, stars, review) %>%
unnest_tokens(word, review) %>%
anti_join(stop_words2)
tidy_review <- recenzije_Dta %>%
mutate(id = row_number()) %>%
select(id, date, product, stars, review) %>%
unnest_tokens(word, review) %>%
anti_join(stop_words2)
tidy_review <- recenzije_Dta %>%
mutate(id = row_number()) %>%
select(id, date, Product, Stars, Review) %>%
unnest_tokens(word, Review) %>%
anti_join(stop_words2)
tidy_review <- recenzije_Dta %>%
mutate(id = row_number()) %>%
select(id, Date, Product, Stars, Review) %>%
unnest_tokens(word, Review) %>%
anti_join(stop_words2)
tidy_review %>%
filter(word == "roomba")
tidy_review
ggplot(tidy_review, aes(x = word, y = n)) +
geom_col() +
coord_flip() +
ggtitle("Review Word Counts")
# fct_reorder funkcija
word_counts <- tidy_review %>%
count(word) %>%
filter(n > 300) %>%
mutate(word2 = fct_reorder(word, n))
word_counts
head(word_counts,8)
ggplot(word_counts, aes(x = word2, y = n)) +
geom_col() +
coord_flip() +
ggtitle("Review Word Counts")
tidy_review %>%
count(word, Product) %>%
arrange(desc(n))
# Facet grafikoni
```{r}
tidy_review %>%
count(word, product) %>%
group_by(product) %>%
top_n(10, n)
```
tidy_review %>%
count(word, product) %>%
group_by(product) %>%
top_n(10, n)
tidy_review %>%
count(word, Product) %>%
group_by(product) %>%
top_n(10, n)
tidy_review %>%
count(word, Product) %>%
group_by(Product) %>%
top_n(10, n)
tidy_review %>%
count(word, product) %>%
group_by(product) %>%
top_n(10, n) %>%
ungroup()
tidy_review %>%
count(word, Product) %>%
group_by(Product) %>%
top_n(10, n) %>%
ungroup()
tidy_review %>%
count(word, Product) %>%
group_by(Product) %>%
top_n(10, n)
word_counts <- tidy_review %>%
count(word, product) %>%
group_by(product) %>%
top_n(10, n) %>%
ungroup() %>%
mutate(word2 = fct_reorder(word, n))
word_counts <- tidy_review %>%
count(word, Product) %>%
group_by(Product) %>%
top_n(10, n) %>%
ungroup() %>%
mutate(word2 = fct_reorder(word, n))
gg <- ggplot(word_counts, aes(x = word2, y = n, fill = product)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ product, scales = "free_y") +
coord_flip() +
ggtitle("Review Word Counts")
gg
gg <- ggplot(word_counts, aes(x = word2, y = n, fill = Product)) +
geom_col(show.legend = FALSE) +
facet_wrap(~Pproduct, scales = "free_y") +
coord_flip() +
ggtitle("Review Word Counts")
gg <- ggplot(word_counts, aes(x = word2, y = n, fill = Product)) +
geom_col(show.legend = FALSE) +
facet_wrap(~Product, scales = "free_y") +
coord_flip() +
ggtitle("Review Word Counts")
gg
library(wordcloud)
word_counts <- tidy_review %>%
count(word)
wordcloud(
words = word_counts$word,
freq = word_counts$n,
max.words = 30)
---
get_sentiments("bing")
get_sentiments("bing")
get_sentiments("bing") %>%
count(sentiment)
get_sentiments("afinn")
get_sentiments("afinn")
install.packages("textdata ")
library(textdata)
library(textdata)
install.packages("textdata")
library(textdata)
get_sentiments("afinn")
get_sentiments("afinn") %>%
summarize( min = min(value), max = max(value) )
sentiment_counts <- get_sentiments("loughran") %>%
count(sentiment) %>%
mutate(sentiment2 = fct_reorder(sentiment, n))
sentiment_counts <- get_sentiments("loughran") %>%
count(sentiment) %>%
mutate(sentiment2 = fct_reorder(sentiment, n))
ggplot(sentiment_counts, aes(x = sentiment2, y = n)) +
geom_col() +
coord_flip() +
labs(
title = "Sentiment Counts in Loughran",
x = "Counts",
y = "Sentiment"
)
```
