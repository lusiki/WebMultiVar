kruskal.test(weight ~ group, data = anova_dta)
# Učitaj podatke
F_dta <- ToothGrowth
# Pregled podataka
dplyr::sample_n(F_dta,10)
# Provedi F-test
procjena_F_dta <- var.test(len ~ supp, data = F_dta)
print(procjena_F_dta)
# Pogledaj omjer varijanci
procjena_F_dta$estimate
# p-vrijednost
procjena_F_dta$p.value
# Učitaj podatke
mv_dta <- PlantGrowth
# Pregledaj podatke
str(mv_dta)
# Provedi Barlett test
b_mv_dta <- bartlett.test(weight ~ group, data = mv_dta)
b_mv_dta
```{r}
# Provedi Barlett test za više nezavisnih varijabli; interaction() to collapse
bartlett.test(len ~ interaction(supp,dose), data = ToothGrowth)
# Provedi Levene test za jednu nezavisnu varijablu
leveneTest(weight ~ group, data = mv_dta)
# Provedi Levene test za više nezavisnih varijabli
leveneTest(len ~ interaction(supp,dose), data = ToothGrowth)
# Provedi Fligner-Killen test
fligner.test(weight ~ group, data = mv_dta)
# Deskriptivna statistika
group_by(anova2_dta, supp, dose) %>%
summarise(
count = n(),
mean = mean(len, na.rm = TRUE),
sd = sd(len, na.rm = TRUE)
)
# Učitaj podatke
anova2_dta <- ToothGrowth
# Pregled podataka
dplyr::sample_n(anova2_dta, 10)
str(anova2_dta)
# Uredi podatke za analizu
anova2_dta$dose <- factor(anova2_dta$dose,
levels = c(0.5, 1, 2),
labels = c("D_0.5", "D_1", "D_2"))
dplyr::sample_n(anova2_dta, 10) # Pregledaj
# Deskriptivna statistika
group_by(anova2_dta, supp, dose) %>%
summarise(
count = n(),
mean = mean(len, na.rm = TRUE),
sd = sd(len, na.rm = TRUE)
)
# Tabuliraj podatke
table(anova2_dta$supp, anova2_dta$dose)
# Provedi test
procjena_anova2_dta <- aov(len ~ supp + dose, data = anova2_dta)
summary(procjena_anova2_dta)
# Test sa interakcijskim regresorom
procjena_anova3_dta <- aov(len ~ supp + dose + supp:dose, data = anova2_dta)
summary(procjena_anova3_dta)
# Međusobna usporedba prosjeka (varijabli)
TukeyHSD(procjena_anova3_dta, which = "dose") # 1. način
summary(glht(procjena_anova3_dta, lincft = mcp(dose = "Tukey"))) # 2. način
# Provjera pretpostavki
plot(procjena_anova3_dta,1) # Homogenost varijance
leveneTest(len ~ supp*dose, data = anova2_dta) # Formalni tetst
# Stvori podatke
sparoge <- c(81,50,27)
# Provedi test
procjena_sparoge <- chisq.test(sparoge, p = c(1/3, 1/3, 1/3))
# Pogledaj rezulatate
procjena_sparoge
# Pogledaj očekivane vrijednosti
procjena_sparoge$expected
# Odredi duge vjerojatnosti
procjena_sparoge2 <- chisq.test(sparoge, p = c(1/2, 1/3, 1/6))
procjena_sparoge2
# Pogledaj p.vrijednosti
procjena_sparoge2$p.value
# Ucitaj podatke
file_path <- "http://www.sthda.com/sthda/RDoc/data/housetasks.txt"
kucniPoslovi <- read.delim(file_path, row.names = 1)
kucniPoslovi # Pogledaj podatke
# Pogledaj kontigencijsku tablicu
kt <- as.table(as.matrix(kucniPoslovi))
gplots::balloonplot(t(kt), main = "kucniPoslovi", # 1. način
xlab = "", ylab = "",
label = F, show.margins = F)
# Provedi Chi-sq
procjena_kucniPoslovi <- chisq.test(kucniPoslovi)
procjena_kucniPoslovi
# Opažene vrijednosti
procjena_kucniPoslovi$observed
procjena_kucniPoslovi
# Opažene vrijednosti
procjena_kucniPoslovi$observed
# Očekivane vrijednosti
round(procjena_kucniPoslovi$expected,2)
# Očekivane vrijednosti
round(procjena_kucniPoslovi$expected,2)
# Prikaži reziduale
round(procjena_kucniPoslovi$residuals,2)
# Grafički prikaz
corrplot(procjena_kucniPoslovi$residuals, is.cor = F)
# Izracunaj doprinos Chi_sq statistici
doprinos <- 100*procjena_kucniPoslovi$residuals^2/procjena_kucniPoslovi$statistic
round(doprinos,2)
corrplot(doprinos, is.cor = F)
load(file.path("../Podatci/parenthood.Rdata"))
drawBasicScatterplot <- function(dotcol,title) {
plot( parenthood$dan.sleep,
parenthood$dan.grump,
xlab = "Sati spavanja",
ylab = "Raspoloženje (0-100)",
col= dotcol,
main = title,
font.main=1,
pch=19)
}
# scatterplot only
drawBasicScatterplot( "black", "Odnos raspoloženja i spavanja")
# Najbolji regresijski pravac
drawBasicScatterplot( emphGrey, "Najbolji regresijski pravac" )
# Najbolji regresijski pravac
drawBasicScatterplot( emphGrey, "Najbolji regresijski pravac" )
good.coef <- lm( dan.grump ~ dan.sleep, parenthood)$coef
abline( good.coef, col=ifelse(colour,emphCol,"black"), lwd=3 )
# Najbolji regresijski pravac
drawBasicScatterplot( emphGrey, "Najbolji regresijski pravac" )
regressionImg <- list()
emphCol <- rgb(0,0,1)
emphColLight <- rgb(.5,.5,1)
emphGrey <- grey(.5)
eps <- TRUE
colour <- TRUE
width <- 6
height <- 6
load(file.path("../Podatci/parenthood.Rdata"))
drawBasicScatterplot <- function(dotcol,title) {
plot( parenthood$dan.sleep,
parenthood$dan.grump,
xlab = "Sati spavanja",
ylab = "Raspoloženje (0-100)",
col= dotcol,
main = title,
font.main=1,
pch=19)
}
# scatterplot only
drawBasicScatterplot( "black", "Odnos raspoloženja i spavanja")
# Najbolji regresijski pravac
drawBasicScatterplot( emphGrey, "Najbolji regresijski pravac" )
good.coef <- lm( dan.grump ~ dan.sleep, parenthood)$coef
abline( good.coef, col=ifelse(colour,emphCol,"black"), lwd=3 )
# Najbolji regresijski pravac
drawBasicScatterplot( emphGrey, "Najbolji regresijski pravac" )
good.coef <- lm( dan.grump ~ dan.sleep, parenthood)$coef
abline( good.coef, col=ifelse(colour,emphCol,"black"), lwd=3 )
# Loš regresijski pravac
drawBasicScatterplot( emphGrey, "Loš regresijski pravac!" )
bad.coef <- c(80,-3)
abline( bad.coef, col=ifelse(colour,emphCol,"black"), lwd=3 )
drawBasicScatterplot( emphGrey, "Regresijska linija" )
abline( good.coef, col=ifelse(colour,emphCol,"black"), lwd=3 )
for(i in seq_along(parenthood$dan.sleep)) {
xval <- parenthood$dan.sleep[i]*c(1,1)
yval <- c(parenthood$dan.grump[i],good.coef[1]+good.coef[2]*parenthood$dan.sleep[i])
lines(xval,yval,type='l', col = emphGrey)
}
drawBasicScatterplot( emphGrey, "Loša regresijska linija" )
abline( good.coef, col=ifelse(colour,emphCol,"black"), lwd=3 )
for(i in seq_along(parenthood$dan.sleep)) {
xval <- parenthood$dan.sleep[i]*c(1,1)
yval <- c(parenthood$dan.grump[i],good.coef[1]+good.coef[2]*parenthood$dan.sleep[i])
lines(xval,yval,type='l', col = emphGrey)
}
drawBasicScatterplot( emphGrey, "Regresijska linija" )
abline( good.coef, col=ifelse(colour,emphCol,"black"), lwd=3 )
for(i in seq_along(parenthood$dan.sleep)) {
xval <- parenthood$dan.sleep[i]*c(1,1)
yval <- c(parenthood$dan.grump[i],good.coef[1]+good.coef[2]*parenthood$dan.sleep[i])
lines(xval,yval,type='l', col = emphGrey)
}
# Procjeni regresijski model i spremi rezultate u objekt
regression.1 <- lm( formula = dan.grump ~ dan.sleep,
data = parenthood )
```{r}
# Pogledaj rezultate
print( regression.1 )
knitr::include_graphics(file.path("../Foto/scatter3d.png"))
# Provedi višestruku regresiju u R
regression.2 <- lm( formula = dan.grump ~ dan.sleep + baby.sleep,
data = parenthood )
# Pregledaj rezultate
print(regression.2)
```{r}
```{r}
X <- parenthood$dan.sleep  # Nezavisna varijabla
Y <- parenthood$dan.grump  # Zavisna varijabla
# Procijenjene vrijednosti
Y.pred <- -8.94 * X  +  125.97
# Izračunaj sumu rezidualnih odstupanja
SS.resid <- sum((Y - Y.pred)^2)
print(SS.resid) # Prikaži
# Izračunaj sumu ukupnih odstupanja
SS.tot <- sum((Y - mean(Y)^2))
print(SS.tot) # Prikaži
# Pogledaj rezultate modela
print( regression.2 )
# Pogledaj rezultate
summary(regression.2)
knitr::include_graphics(file.path("../Foto/outlier.png"))
# Izračunaj mjeru Cook-ove udaljenosti
cooks.distance( model = regression.2 )
# Prikaži Cook-ovu mjeru grafički
plot(x = regression.2, which = 4)
lm(formula = dan.grump ~ dan.sleep + baby.sleep,
data = parenthood,
subset = -64)
# Provedi test homogenosti varijance
car::ncvTest(regression.2)
# Provedi drugi test varijance
library(car)
lmtest::coeftest( regression.2, vcov= hccm )
# Provedi test
vif( mod = regression.2 )
# Pogledaj korelaciju
cor( parenthood )
.
# Specificiraj puni model
full.model <- lm(formula = dan.grump ~ dan.sleep + baby.sleep + day,
data = parenthood)
# Selekcija unatrag
step(object = full.model,
direction = "backward")
# Procijeni osnovni model
nul.model <- lm(dan.grump ~ 1, parenthood)
# Definiraj selekcijsku funkciju (unaprijed)
step(object = nul.model,
direction = "forward",
scope = dan.grump ~ dan.sleep + baby.sleep + day)
---
# Procjeni dva ugnježdena modela
M0 <- lm( dan.grump ~ dan.sleep + day, parenthood )
M1 <- lm( dan.grump ~ dan.sleep + day + baby.sleep, parenthood )
# Usporedi modele
AIC( M0, M1 )
# Procjeni dva ugnježdena modela
M0 <- lm( dan.grump ~ dan.sleep + day, parenthood )
M1 <- lm( dan.grump ~ dan.sleep + day + baby.sleep, parenthood )
# Usporedi modele
AIC( M0, M1 )
# Provedi hijerarhijsku regresiju
anova(M0, M1)
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=F#, echo=F, warning=F, message=F
)
library(ggpubr)
library(dplyr)
library(Hmisc)
library(corrplot)
library(PerformanceAnalytics)
library(PairedData)
library(multcomp)
library(car)
library(gplots)
prije <- c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
nakon <- c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Poveži u DF
zu2 <- data.frame(
grupa = rep(c("prije", "nakon"), each = 10),
tezina = c(prije, nakon)
)
# Pregled podataka
head(zu2,10)
# Pregled podataka
head(sample(zu2),10)
zu2[sample(.N,6)]
zu2_DT <- data.table(zu2)
# Pregled podataka
library(data.table)
zu2_DT <- data.table(zu2)
zu2[sample(.N,6)]
mtcars <- data.table(mtcars)
mtcars[sample(.N, 6)]
mtcars[sample(2, 6)]
zu2_DT[sample(.N,6)]
knitr::include_graphics(file.path("../Foto/outlier.png"))
visina_zene <- c(38.9, 61.2, 73.3, 21.8, 63.4, 64.6, 48.4, 48.8, 48.5)
visina_muskarci <- c(67.8, 60, 63.4, 76, 89.4, 73.3, 67.3, 61.3, 62.4)
# Poveži u DF
nu2 <- data.frame(
grupa = rep(c("Muskarci", "Zene"), each = 9),
tezina = c(visina_zene, visina_muskarci)
)
# Pogledaj podatke
print(sample(nu2,7)
# Pogledaj podatke
print(sample(nu2,7))
## t-test ##
# Stvori podatke
visina_zene <- c(38.9, 61.2, 73.3, 21.8, 63.4, 64.6, 48.4, 48.8, 48.5)
visina_muskarci <- c(67.8, 60, 63.4, 76, 89.4, 73.3, 67.3, 61.3, 62.4)
# Poveži u DF
nu2 <- data.frame(
grupa = rep(c("Muskarci", "Zene"), each = 9),
tezina = c(visina_zene, visina_muskarci)
)
# Pogledaj podatke
print(sample(nu2,7))
# Pogledaj podatke
print(sample_n(nu2,7))
# Pogledaj podatke
print(dplyr::sample_n(nu2,7))
# Pogledaj rezultate
summary(regression.2)
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=F#, echo=F, warning=F, message=F
)
knitr::include_graphics("../Foto/sparrow_dta_0.png")
knitr::include_graphics("./Foto/sparrow_dta_0.png")
knitr::include_graphics("../Foto/sparrow_dta_0.png")
knitr::include_graphics("../Foto/sparrow_dta.png")
knitr::include_graphics("../Foto/sparrow_cor.png")
knitr::include_graphics("../Foto/sparrow_eigen.png")
knitr::include_graphics("../Foto/sparrow_eigen.png")
knitr::include_graphics("../Foto/sparrow_compare.png")
knitr::include_graphics("../Foto/sparrow_PCA.png")
knitr::include_graphics("../3_PCA/european_dta.png")
knitr::include_graphics("../Foto/european_dta.png")
knitr::include_graphics("../Foto/european_cor.png")
knitr::include_graphics("../Foto/european_cor.png")
knitr::include_graphics("../Foto/european_PCA.png")
knitr::include_graphics("../Foto/djeca_PCA.png")
knitr::include_graphics("../Foto/grades_cor.png")
knitr::include_graphics("../Foto/grades_PCA_gg.png")
```{r, include=TRUE,fig.height=6, fig.align="center", fig.cap=c(""), echo=FALSE}
knitr::include_graphics("../Foto/grades_PCA_gg.png")
knitr::include_graphics("../Foto/zaposlenost_sifranik.png")
```{r, include=TRUE,fig.height=7, fig.align="center", fig.cap=c(""), echo=FALSE}
knitr::include_graphics("../Foto/zaposlenost_scree.png")
knitr::include_graphics("../Foto/tv_pca_gg.png")
knitr::include_graphics("../Foto/grades_PCA.png")
knitr::include_graphics("../Foto/grades_PCA_gg.png")
knitr::include_graphics("../Foto/grades_loadings.png")
knitr::include_graphics("../Foto/zaposlenost_cor.png")
knitr::include_graphics("../Foto/zaposlenost_PCA.png")
knitr::include_graphics("../Foto/zaposlenost_loadings.png")
knitr::include_graphics("../Foto/zaposlenost_PCA_gg.png")
knitr::include_graphics("../Foto/zaposlenost_zemlje.png")
knitr::include_graphics("../Foto/socmob_sifranik.png")
knitr::include_graphics("../Foto/socmob_cor.png")
knitr::include_graphics("../Foto/socmob_loadings.png")
knitr::include_graphics("../Foto/tv_cor.png")
knitr::include_graphics("../Foto/tv_scree.png")
knitr::include_graphics("../Foto/tv_pca_gg.png")
data("USArrests")  # Učitaj podatke
head(USArrests,10) # Pregledaj podatke
apply(USArrests, 2, var) # Pogledaj varijance verijabli
skalirano_dta <- apply(USArrests,2, scale) # Standardiziraj varijable
str(skalirano_dta) # Pogledaj novi objekt
head(skalirano_dta,10) # pogledaj podatke
# Za izračun glavnih komponenti:
## 1. izračunaj kovarijančnu matricu
kov_dta <- cov(skalirano_dta)
## 2. Izračunaj svojstvene vrijednosti km
eig_kov_dta <- eigen(kov_dta)
str(eig_kov_dta) # Pogledaj objekt
## 3. Spremi opterećenja u novi objekt
opt <- eig_kov_dta$vectors[,1:2]
## 4. Okreni smjer svojstvenih vektora
opt <- -opt
## 5. Pripiši nazive
row.names(opt) <- c("Murder", "Assault", "UrbanPop", "Rape")
colnames(opt) <- c("PC1", "PC2")
head(opt) # Pogledaj objekt
## 6. Izračunaj koeficijente glavnih komponenti
PC1 <- as.matrix(skalirano_dta) %*% opt[,1]
PC2 <- as.matrix(skalirano_dta) %*% opt[,2]
## 7. Poveži u podatkovni okvir
PC <- data.frame(GEO = row.names(USArrests), PC1, PC2)
head(PC)
# Prikaži prve dvije PC komponente grafički
ggplot2:: ggplot(PC, aes(PC1,PC2)) +
modelr:: geom_ref_line(h=0) +
modelr:: geom_ref_line(v= 0) +
geom_text(aes(label = GEO), size = 4) +
xlab("PC1") +
ylab("PC2") +
ggtitle("Prve dvije glavne komponente za USArrests podatkovni okvir")
library(ggplot2)
# Prikaži prve dvije PC komponente grafički
ggplot2:: ggplot(PC, aes(PC1,PC2)) +
modelr:: geom_ref_line(h=0) +
modelr:: geom_ref_line(v= 0) +
geom_text(aes(label = GEO), size = 4) +
xlab("PC1") +
ylab("PC2") +
ggtitle("Prve dvije glavne komponente za USArrests podatkovni okvir")
PCvar <- eig_kov_dta$values / sum(eig_kov_dta$values)
print(round(PCvar,2)) # Prikaži podatke
PVEplot <- qplot(c(1:4), PCvar) +
geom_line() +
xlab("PC") +
ylab("PVE") +
ggtitle("Scree") +
ylim(0, 1)
cumPVE <- qplot(c(1:4), cumsum(PCvar)) +
geom_line() +
xlab("PC") +
ylab(NULL) +
ggtitle("Cumulative Sum Scree") +
ylim(0,1)
PVEplot + cumPVE
PVEplot
cumPVE
PCA_fun <- prcomp(USArrests, scale = T)
names(PCA_fun) # Pregledaj objekt
# Pogledaj prosjek komponenti po varijablama
PCA_fun$center
# Pogledaj stdev komponenti po varijablama
PCA_fun$scale
# Pogledaj opterećenja
PCA_fun$rotation
# Promjeni predznak
PCA_fun$rotation <- -PCA_fun$rotation
PCA_fun$rotation
# Izračunaj koeficijente
PCA_fun$x <- -PCA_fun$x
head(PCA_fun$x)
# Vizualiziraj
biplot(PCA_fun, scale = 0)
# Izračunaj varijancu po glavnim komponentama
VE <- PCA_fun$sdev^2
PCv <- VE / sum(VE)
print(round(PCv, 2))
---
---
data(decathlon2)
library(FactoMineR)
library(factoextra)
library(FactoMineR)
library(tidyverse)  # data manipulation and visualization
library(gridExtra)  # plot arrangement
library(patchwork)
data(decathlon2)
head(decathlon2, 10)
head(decathlon2, 5)
str(decathlon2)
decathlon2.active <- decathlon2[1:23, 1:10]
head(decathlon2.active[, 1:6], 10)
print(procjena_PCA)
procjena_PCA <- FactoMineR::PCA(decathlon2.active, graph = F)
print(procjena_PCA)
# Prikaži grafički
fviz_eig(procjena_PCA, addlabels = T, ylim = c(0,45))
vars <- get_pca_var(procjena_PCA)
print(vars)
head(vars$coord)   # Pogledaj koordinate za varijable
head(vars$cos2)    # Reprezentativnost varijabli
head(vars$contrib) # Doprinos varijabli komponentama
print(vars)
# Prikaži varijable u prostoru glavnih komponenti
fviz_pca_var(procjena_PCA, col.var = "contrib")
# Prikaži doprinos na stupčastom grafikonu
fviz_cos2(procjena_PCA, choice = "var", axes = 1:2)
# Prikaži kvalitetu reprezentacije varijabli u PC prostoru
corrplot::corrplot(vars$contrib, is.corr = F)
# Prikaži na stupčastom grafikonu
fviz_contrib(procjena_PCA, choice = "var", axses = 1, top = 10)
```{r}
# Grupiranje na osnovi Kmeans algoritma
set.seed(123)
group_km <- kmeans(vars$coord, centers = 3, nstart = 25)
group <- as.factor(group_km$cluster)
fviz_pca_var(procjena_PCA, col.var = group,
palette = c("#0073C2FF", "#EFC000FF", "#868686FF"),
legend.title = "cluster")
opis_PCA <- dimdesc(procjena_PCA, axes = c(1,2), proba = 0.05)
head(opis_PCA,10)
opis_PCA$Dim.1
inds <- get_pca_ind(procjena_PCA) # Stvori IE objekt
print(inds) # Pregledaj
head(inds$coord)     # Kordinate za IE
fviz_pca_ind(procjena_PCA, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_cos2(procjena_PCA, choice = "ind")
fviz_cos2(procjena_PCA, choice = "ind",
axses = 1:2) # Prve dvije dimenzije
fviz_cos2(procjena_PCA, choice = "ind",
axses = 1:2) # Prve dvije dimenzije
head(iris,5) # Pogledaj podatke
iris_PCA
# Provedi PCA
iris_PCA <- PCA(iris[,-5], graph = F)
iris_PCA
print(procjena_PCA)
head(opis_PCA,10)
# Prikaži grafički
fviz_eig(procjena_PCA, addlabels = T, ylim = c(0,45))
head(opis_PCA,10)
