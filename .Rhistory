head(epistole,5)
epistole
epistole
sources <- epistole %>%
distinct(source) %>%
rename(label = source)
destinations <- epistole %>%
distinct(destination) %>%
rename(label = destination)
sources
destinations
sources
View(destinations)
sources
sources
sources <- epistole %>%
distinct(source) %>%
rename(label = source)
# dodaj ID
nodes <- nodes %>% rowid_to_column("id")
nodes
# poveži u jedan objekt
nodes <- full_join(sources, destinations, by = "label")
nodes
# dodaj ID
nodes <- nodes %>% rowid_to_column("id")
nodes
per_route <- epistole %>%
group_by(source, destination) %>%
summarise(weight = n()) %>%
ungroup()
per_route
edges <- per_route %>%
left_join(nodes, by = c("source" = "label")) %>%
rename(from = id)
edges
s
edges <- edges %>%
left_join(nodes, by = c("destination" = "label")) %>%
rename(to = id)
edges
library(network)
install.packages("network")
routes_network <- network(edges,
vertex.attr = nodes,
matrix.type = "edgelist",
ignore.eval = FALSE)
library(network)
routes_network <- network(edges,
vertex.attr = nodes,
matrix.type = "edgelist",
ignore.eval = FALSE)
class(routes_network)
routes_network
plot(routes_igraph, edge.arrow.size = 0.2)
library(igraph)
# Napravi mrežni objekt
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = TRUE)
detach(package:network) # ukloni paket
rm(routes_network) # Ukloni iz radnog prostora
library(igraph)
# Napravi mrežni objekt
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = TRUE)
# 1. način
routes_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
# 2.način
routes_igraph_tidy <- as_tbl_graph(routes_igraph)
library(visNetwork)
library(networkD3)
install.packages("networkD3")
library(tidyverse)  # data manipulation and visualization
library(gridExtra)  # plot arrangement
library(ggplot2)
library(tidyverse)
library(dplyr)
library(rvest)
library(janitor)
edge_list <- tibble(from = c(1, 2, 2, 3, 4), to = c(2, 3, 4, 2, 1))
node_list <- tibble(id = 1:4)
edge_list
node_list
url <- "https://github.com/jessesadler/intro-to-r/blob/master/data/correspondence-data-1585.csv"
epistole <- read_html(url) %>%
html_table(fill = TRUE) %>%
as.data.frame() %>%
select(-1) %>%
row_to_names(1)
glimpse(epistole)
epistole
sources <- epistole %>%
distinct(source) %>%
rename(label = source)
sources
sources
d
destinations <- epistole %>%
distinct(destination) %>%
rename(label = destination)
destinations
# poveži u jedan objekt
nodes <- full_join(sources, destinations, by = "label")
# dodaj ID
nodes <- nodes %>% rowid_to_column("id")
t
per_route <- epistole %>%
group_by(source, destination) %>%
summarise(weight = n()) %>%
ungroup()
per_route
edges <- per_route %>%
left_join(nodes, by = c("source" = "label")) %>%
rename(from = id)
edges
edges <- edges %>%
left_join(nodes, by = c("destination" = "label")) %>%
rename(to = id)
edges
library(network)
routes_network <- network(edges,
vertex.attr = nodes,
matrix.type = "edgelist",
ignore.eval = FALSE)
class(routes_network)
routes_network
plot(routes_network, vertex.cex = 3)
plot(routes_network, vertex.cex = 3, mode = "circle")
detach(package:network) # ukloni paket
rm(routes_network) # Ukloni iz radnog prostora
library(igraph)
# Napravi mrežni objekt
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = TRUE)
nodes
# Napravi mrežni objekt
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = TRUE)
edges
# Napravi mrežni objekt
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = TRUE)
View(edges)
View(edge_list)
View(edges)
edges <- edges %>%
left_join(nodes, by = c("destination" = "label")) %>%
rename(to = id)
edges
edges
edgesp <- edges[,-c(1,2)]
# Napravi mrežni objekt
routes_igraph <- graph_from_data_frame(d = edgesp,
vertices = nodes,
directed = TRUE)
nodes
edges
nodes
edges <- per_route %>%
left_join(nodes, by = c("source" = "label")) %>%
rename(from = id)
edges
edges <- edges %>%
left_join(nodes, by = c("destination" = "label")) %>%
rename(to = id)
edges
# Napravi mrežni objekt
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = TRUE)
plot(routes_igraph, edge.arrow.size = 0.2)
View(nodes)
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
"Esmeralda"),
age=c(48,33,45,34,21),
gender=c("F","M","F","M","F"))
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David",
"David", "Esmeralda"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob", "Alice"),
same.dept=c(FALSE,FALSE,TRUE,FALSE,FALSE,TRUE),
friendship=c(4,5,5,2,1,1), advice=c(4,5,5,4,2,3))
View(actors)
View(relations)
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
print(g, e=TRUE, v=TRUE)
nodes %>% rename(names=label) -> nod
View(nod)
nodes %>% rename(names=label) %>% select(names,id) -> nod
# Napravi mrežni objekt
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nod,
directed = TRUE)
routes_igraph # Pogledaj objekt
plot(routes_igraph, edge.arrow.size = 0.2)
# Cirkularna vizualizacija
ggraph(routes_igraph, layout = "linear") +
geom_edge_arc(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label)) +
labs(edge_width = "Letters") +
theme_graph()
library(ggraph)
function (mat, widths = rep.int(1, ncol(mat)), heights = rep.int(1,
nrow(mat)), respect = FALSE)
plot(routes_igraph, layout = layout_with_graphopt, edge.arrow.size = 0.2)
plot(routes_igraph, layout = layout_with_graphopt, edge.arrow.size = 0.2)
library(tidygraph)
library(ggraph)
# 1. način
routes_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
# 2.način
routes_igraph_tidy <- as_tbl_graph(routes_igraph)
# Pregledaj objekte
class(routes_tidy)
class(routes_igraph_tidy)
class(routes_igraph)
routes_tidy
routes_tidy %>%
activate(edges) %>%
arrange(desc(weight))
# Osnovna vizualizacija
ggraph(routes_tidy) + geom_edge_link() + geom_node_point() + theme_graph()
# Pobolljšana vizualizacija
ggraph(routes_tidy, layout = "graphopt") +
geom_node_point() +
geom_edge_link(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label), repel = TRUE) +
labs(edge_width = "Letters") +
theme_graph()
# Cirkularna vizualizacija
ggraph(routes_igraph, layout = "linear") +
geom_edge_arc(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label)) +
labs(edge_width = "Letters") +
theme_graph()
library(visNetwork)
visNetwork(nodes, edges)
library(networkD3)
nodes_d3 <- mutate(nodes, id = id - 1)
edges_d3 <- mutate(edges, from = from - 1, to = to - 1)
forceNetwork(Links = edges_d3, Nodes = nodes_d3, Source = "from", Target = "to",
NodeID = "label", Group = "id", Value = "weight",
opacity = 1, fontSize = 16, zoom = TRUE)
ankeyNetwork(Links = edges_d3, Nodes = nodes_d3, Source = "from", Target = "to",
NodeID = "label", Value = "weight", fontSize = 16, unit = "Letter(s)")
sankeyNetwork(Links = edges_d3, Nodes = nodes_d3, Source = "from", Target = "to",
NodeID = "label", Value = "weight", fontSize = 16, unit = "Letter(s)")
mtcars[,c(1,3:6)]
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=T, echo=T, warning=F, message=F
)
knitr::opts_hooks$set(fig.callout = function(options) {
if (options$fig.callout) {
options$echo <- FALSE
options$out.height <- "99%"
options$fig.width <- 16
options$fig.height <- 8
}
options
})
```{r}
# read nodes and ties data into variables
nodes <- read_csv("../PODATCI/nodes.csv")
library(tidyverse)  # data manipulation and visualization
library(gridExtra)  # plot arrangement
library(ggplot2)
library(tidyverse)
library(dplyr)
library(rvest)
library(janitor)
# read nodes and ties data into variables
nodes <- read_csv("../PODATCI/nodes.csv")
# read nodes and ties data into variables
nodes <- read_csv("./PODATCI/nodes.csv")
# read nodes and ties data into variables
nodes <- read_csv("./PODATCI/nodes.csv")
# read nodes and ties data into variables
nodes <- read_csv("../PODATCI/nodes.csv")
# read nodes and ties data into variables
nodes <- read_csv("../Podatci/nodes.csv")
nodes <- read_csv("../Podatci/nodes.csv")
# read nodes and ties data into variables
nodes <- read_csv("../Podatci/names.csv")
ties <- read_csv("../Podatci/edges.csv")
# build a network from data frames
g <- graph_from_data_frame(d = ties,
directed = FALSE,
vertices = nodes)
library(igraph)
# build a network from data frames
g <- graph_from_data_frame(d = ties,
directed = FALSE,
vertices = nodes)
nodes <- read_csv("../Podatci/names.csv") %>% rowid_to_column()
View(nodes)
nodes <- read_csv("../Podatci/nodes.csv")
ties <- read_csv("../Podatci/ties.csv")
g <- graph_from_data_frame(d = ties,
directed = FALSE,
vertices = nodes)
V(g)
vcount(g)
# Pregledaj čvorove
V(g)
# Pregledaj poveznice
E(g)
ecount(g)
# Pregledaj poveznice
E(g)
# Pregledaj čvorove
V(g)
g
g$name <- "Madrid network"
g$name
g
vcount(g)
V(g)
# dodaj ID kao atribut mreži
V(g)$id <- 1:vcount(g)
# dodaj ID kao atribut mreži
V(g)$id <- 1:vcount(g)
E(g)$weight
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = weight)) +
geom_node_point()
library(tidyverse)  # data manipulation and visualization
library(gridExtra)  # plot arrangement
library(ggplot2)
library(tidyverse)
library(dplyr)
library(rvest)
library(janitor)
library(readr)
library(igraph)
library(igraph)
library(dplyr)
library(ggplot2)
library(ggraph)
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = weight)) +
geom_node_point()
degree(g)
strength(g)
# Izračunaj udaljenost za poveznice
dist_weight = 1 / E(g)$weight
# Izračunaj weighted betweenness na poveznicama
edge_betweenness(g, weights = dist_weight)
knitr::include_graphics("../Foto/net1.png")
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = betweenness)) +
geom_node_point()
ggraph(g, layout = "with_kk")
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = betweenness)) +
geom_node_point()
g
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = betweenness)) +
geom_node_point()
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = weight)) +
geom_node_point(aes(size = degree))
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = betweenness)) +
geom_node_point()
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = betweenness)) +
geom_node_point()
g
# Izračunaj weighted betweenness na poveznicama
edge_betweenness(g, weights = dist_weight)
g$betweenness <- edge_betweenness(g, weights = dist_weight)
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = betweenness)) +
geom_node_point()
g
g
(
ggraph(g, layout = "with_kk")
ggraph(g, layout = "with_kk") +
ggraph(g, layout = "with_kk") +
geom_edge_link() +
geom_node_point()
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = betweenness)) +
geom_node_point()
# Izračunaj weighted betweenness na poveznicama
eb <- edge_betweenness(g, weights = dist_weight)
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = eb)) +
geom_node_point()
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = g$betweenness)) +
geom_node_point()
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = g$weight)) +
geom_node_point(aes(size = g$degree))
knitr::include_graphics("../Foto/net2.png")
ties %>%
group_by(weight) %>%
summarise(n = n(), p = n / nrow(ties)) %>%
arrange(-n)
View(ties)
as_adjacency_matrix(g)
A = as_adjacency_matrix(g)
A
A = as_adjacency_matrix(g, attr = "weight") # Ponderirana matrica
A
# prvi red matrice A
A[1, ]
# prva kolona matrice A
A[, 1]
# dijagonala matrice A
diag(A)
# dijagonala matrice A
diag(A)
# prvi red matrice A
A[1, ]
# prva kolona matrice A
A[, 1]
# prvi red matrice A
A[1, ]
# prva kolona matrice A
A[, 1]
# prvi red matrice A
A[1, ]
# odnos između stupnja i snage
ggplot(data = nodes, mapping = aes(x = degree, y = strength)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
nodes
nodes <- nodes %>%
mutate(
degree = degree(g),
# Add a column containing the strength of each node
strength = strength(g)
) %>%
# Arrange rows by descending strength
arrange(desc(strength))
# odnos između stupnja i snage
ggplot(data = nodes, mapping = aes(x = degree, y = strength)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Izračunaj snagu korelacije
cor(nodes$degree, nodes$strength)
as_data_frame(g, what = "both")
A <- as_adjacency_matrix(g)
# matrica u graf
g <- graph_from_adjacency_matrix(A)
# graf u data.frame
df = as_data_frame(g, what = "both")
# data.frame u graf
g <- graph_from_data_frame(df$ties, vertices = df$nodes)
# distance matrix from similarity matrix
D <- 1-S
S <- cor(A)
S <- cor(A)
knitr::include_graphics("../Foto/net5.png")
knitr::include_graphics("../Foto/net6.png")
knitr::include_graphics("../Foto/net7.png")
ties_swapped <- ties %>%
# Swap the variables from and to
mutate(temp = to, to = from, from = temp) %>%
select(-temp)
# Bind ties and ties_swapped by row
ties_bound <- bind_rows(ties_swapped, ties)
ggplot(ties_bound, aes(x = from, y = to, fill = factor(weight))) +
# Add a raster geom
geom_raster() +
# Label the color scale as "weight"
labs(fill = "weight")
A <- as_adjacency_matrix(g, attr = "weight", names = FALSE)
# Get the weighted adjacency matrix
A <- as_adjacency_matrix(g, attr = "weight", names = FALSE)
A = as_adjacency_matrix(g, attr = "weight") # Ponderirana matrica
A = as_adjacency_matrix(g, attr = "weight") # Ponderirana matrica
as_adjacency_matrix(g)
g
S <- cor(A)
h <- graph_from_adjacency_matrix(S, mode = "undirected", weighted = TRUE)
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = g$weight)) +
geom_node_point(aes(size = g$degree))
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = g$betweenness)) +
geom_node_point()
knitr::include_graphics("../Foto/net1.png")
strength(g)
# get the adjacency matrix of network g
A = as_adjacency_matrix(g)
# get the weighted adjacency matrix of weighted network g
A = as_adjacency_matrix(g, attr = "weight")
g
E(g)$weight # Pogledaj weight atribut
g
# get the weighted adjacency matrix of weighted network g
g$weight <- weight(g)
# get the weighted adjacency matrix of weighted network g
g$weight <- E(g)$weight
A = as_adjacency_matrix(g, attr = "weight")
