PCbiplot <- function(PC, x="PC1", y="PC2") {
# PC being a prcomp object
data <- data.frame(obsnames=row.names(PC$x), PC$x)
plot <- ggplot(data, aes_string(x=x, y=y)) + geom_text(alpha=.4, size=3, aes(label=obsnames))
plot <- plot + geom_hline(aes(0), size=.2) + geom_vline(aes(0), size=.2)
datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation)
mult <- min(
(max(data[,y]) - min(data[,y])/(max(datapc[,y])-min(datapc[,y]))),
(max(data[,x]) - min(data[,x])/(max(datapc[,x])-min(datapc[,x])))
)
datapc <- transform(datapc,
v1 = .7 * mult * (get(x)),
v2 = .7 * mult * (get(y))
)
plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 5, vjust=1, color="red")
plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), arrow=arrow(length=unit(0.2,"cm")), alpha=0.75, color="red")
plot
}
obj <- biplot(PCA_fun, scale = 0) # Vizualiziraj
PCbiplot(obj)
PCbiplot(PCA_fun)
biplot(PCA_fun, scale = 0) # Vizualiziraj
PCbiplot <- function(PC, x="PC1", y="PC2") {
# PC being a prcomp object
data <- data.frame(obsnames=row.names(PC$x), PC$x)
plot <- ggplot(data, aes_string(x=x, y=y)) + geom_text(alpha=.4, size=3, aes(label=obsnames))
plot <- plot + geom_hline(aes(0), size=.2) + geom_vline(aes(0), size=.2)
datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation)
mult <- min(
(max(data[,y]) - min(data[,y])/(max(datapc[,y])-min(datapc[,y]))),
(max(data[,x]) - min(data[,x])/(max(datapc[,x])-min(datapc[,x])))
)
datapc <- transform(datapc,
v1 = .7 * mult * (get(x)),
v2 = .7 * mult * (get(y))
)
plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 5, vjust=1, color="red")
plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), arrow=arrow(length=unit(0.2,"cm")), alpha=0.75, color="red")
plot
}
PCbiplot(PCA_fun)
PCbiplot <- function(PC, x="PC1", y="PC2") {
# PC being a prcomp object
data <- data.frame(obsnames=row.names(PC$x), PC$x)
plot <- ggplot(data, aes_string(x=x, y=y)) + geom_text(alpha=.4, size=3, aes(label=obsnames))
plot <- plot + geom_hline() + geom_vline()
datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation)
mult <- min(
(max(data[,y]) - min(data[,y])/(max(datapc[,y])-min(datapc[,y]))),
(max(data[,x]) - min(data[,x])/(max(datapc[,x])-min(datapc[,x])))
)
datapc <- transform(datapc,
v1 = .7 * mult * (get(x)),
v2 = .7 * mult * (get(y))
)
plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 5, vjust=1, color="red")
plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), arrow=arrow(length=unit(0.2,"cm")), alpha=0.75, color="red")
plot
}
PCbiplot(PCA_fun)
PCbiplot <- function(PC, x="PC1", y="PC2") {
# PC being a prcomp object
data <- data.frame(obsnames=row.names(PC$x), PC$x)
plot <- ggplot(data, aes_string(x=x, y=y)) + geom_text(alpha=.4, size=3, aes(label=obsnames))
datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation)
mult <- min(
(max(data[,y]) - min(data[,y])/(max(datapc[,y])-min(datapc[,y]))),
(max(data[,x]) - min(data[,x])/(max(datapc[,x])-min(datapc[,x])))
)
datapc <- transform(datapc,
v1 = .7 * mult * (get(x)),
v2 = .7 * mult * (get(y))
)
plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 5, vjust=1, color="red")
plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), arrow=arrow(length=unit(0.2,"cm")), alpha=0.75, color="red")
plot
}
PCbiplot(PCA_fun)
plot <- ggplot(data, aes_string(x=x, y=y)) + geom_text(alpha=.8, size=2, aes(label=obsnames))
# funkcija za ljepši biplot
PCbiplot <- function(PC, x="PC1", y="PC2") {
# PC being a prcomp object
data <- data.frame(obsnames=row.names(PC$x), PC$x)
plot <- ggplot(data, aes_string(x=x, y=y)) + geom_text(alpha=.8, size=2, aes(label=obsnames))
datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation)
mult <- min(
(max(data[,y]) - min(data[,y])/(max(datapc[,y])-min(datapc[,y]))),
(max(data[,x]) - min(data[,x])/(max(datapc[,x])-min(datapc[,x])))
)
datapc <- transform(datapc,
v1 = .7 * mult * (get(x)),
v2 = .7 * mult * (get(y))
)
plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 5, vjust=1, color="red")
plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), arrow=arrow(length=unit(0.2,"cm")), alpha=0.75, color="red")
plot
}
# Vizualiziraj
# biplot(PCA_fun, scale = 0) bi se koristio uobičajeno
PCbiplot(PCA_fun) # custom made funkcija; vidi .Rmd
# funkcija za ljepši biplot
PCbiplot <- function(PC, x="PC1", y="PC2") {
# PC being a prcomp object
data <- data.frame(obsnames=row.names(PC$x), PC$x)
plot <- ggplot(data, aes_string(x=x, y=y)) + geom_text(alpha=.99, size=2, aes(label=obsnames))
datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation)
mult <- min(
(max(data[,y]) - min(data[,y])/(max(datapc[,y])-min(datapc[,y]))),
(max(data[,x]) - min(data[,x])/(max(datapc[,x])-min(datapc[,x])))
)
datapc <- transform(datapc,
v1 = .7 * mult * (get(x)),
v2 = .7 * mult * (get(y))
)
plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 5, vjust=1, color="red")
plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), arrow=arrow(length=unit(0.2,"cm")), alpha=0.75, color="red")
plot
}
# funkcija za ljepši biplot
PCbiplot <- function(PC, x="PC1", y="PC2") {
# PC being a prcomp object
data <- data.frame(obsnames=row.names(PC$x), PC$x)
plot <- ggplot(data, aes_string(x=x, y=y)) + geom_text(alpha=.99, size=0.8, aes(label=obsnames))
datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation)
mult <- min(
(max(data[,y]) - min(data[,y])/(max(datapc[,y])-min(datapc[,y]))),
(max(data[,x]) - min(data[,x])/(max(datapc[,x])-min(datapc[,x])))
)
datapc <- transform(datapc,
v1 = .7 * mult * (get(x)),
v2 = .7 * mult * (get(y))
)
plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 5, vjust=1, color="red")
plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), arrow=arrow(length=unit(0.2,"cm")), alpha=0.75, color="red")
plot
}
# funkcija za ljepši biplot
PCbiplot <- function(PC, x="PC1", y="PC2") {
# PC being a prcomp object
data <- data.frame(obsnames=row.names(PC$x), PC$x)
plot <- ggplot(data, aes_string(x=x, y=y)) + geom_text(alpha=.99, size=0.8, aes(label=obsnames))
datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation)
mult <- min(
(max(data[,y]) - min(data[,y])/(max(datapc[,y])-min(datapc[,y]))),
(max(data[,x]) - min(data[,x])/(max(datapc[,x])-min(datapc[,x])))
)
datapc <- transform(datapc,
v1 = .7 * mult * (get(x)),
v2 = .7 * mult * (get(y))
)
plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 3, vjust=1, color="red")
plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), arrow=arrow(length=unit(0.2,"cm")), alpha=0.75, color="red")
plot
}
# Vizualiziraj
# biplot(PCA_fun, scale = 0) # standardna funkcija
PCbiplot(PCA_fun) # custom made funkcija; vidi .Rmd
## PROVEDI PROCEDURU PUTEM FORMULA ##
PCA_fun <- stats::prcomp(USArrests, scale = T)
# Provedi PCA
procjena_PCA <- FactoMineR::PCA(decathlon2.active, graph = F)
# Vidi niže za detaljnjiji opis
# Podatci
data(decathlon2)
head(decathlon2, 5)
# Vidi niže za detaljnjiji opis
# Podatci
data(decathlon2)
head(decathlon2, 5)
library(FactoMineR)
library(factoextra)
library(FactoMineR)
library(tidyverse)  # data manipulation and visualization
library(gridExtra)  # plot arrangement
library(patchwork)
library(ggplot2)
# Vidi niže za detaljnjiji opis
# Podatci
data(decathlon2)
# Definiraj podatke za analizu
decathlon2.active <- decathlon2[1:23, 1:10]
print(procjena_PCA)
# Provedi PCA
procjena_PCA <- FactoMineR::PCA(decathlon2.active, graph = F)
print(procjena_PCA)
# Izvuci svojstvene vrijednosti
svojstvene_vrijednosti <- get_eigenvalue(procjena_PCA)
# Prikaži grafički
fviz_eig(procjena_PCA, addlabels = T, ylim = c(0,45))
# Prikaži grafički
factoextra::fviz_eig(procjena_PCA, addlabels = T, ylim = c(0,45))
# Prikaži grafički
factoextra::fviz_eig(procjena_PCA, addlabels = T, ylim = c(0,45))
# Izvuci svojstvene vrijednosti
svojstvene_vrijednosti <- factoextra::get_eigenvalue(procjena_PCA)
print(svojstvene_vrijednosti)
## VARIJABLE ##
vars <- factoextra::get_pca_var(procjena_PCA)
# Prikaži varijable u prostoru glavnih komponenti
factoextra::fviz_pca_var(procjena_PCA, col.var = "contrib")
# Prikaži varijable u prostoru glavnih komponenti
factoextra::fviz_pca_var(procjena_PCA, col.var = "contrib")+
theme(text = element_text(size = 7.5),
axis.title = element_text(size = 7.5),
axis.text = element_text(size = 7.5))
# Prikaži varijable u prostoru glavnih komponenti
factoextra::fviz_pca_var(procjena_PCA, col.var = "contrib")+
theme(text = element_text(size = 3),
axis.title = element_text(size = 7.5),
axis.text = element_text(size = 7.5))
# Prikaži varijable u prostoru glavnih komponenti
factoextra::fviz_pca_var(procjena_PCA, col.var = "contrib")+
theme(text = element_text(size = 1),
axis.title = element_text(size = 7.5),
axis.text = element_text(size = 7.5))
# Prikaži varijable u prostoru glavnih komponenti
factoextra::fviz_pca_var(procjena_PCA, col.var = "contrib")+
theme(text = element_text(size = 1))
# Prikaži varijable u prostoru glavnih komponenti
factoextra::fviz_pca_var(procjena_PCA, col.var = "contrib")+
theme(text = element_text(size = 5),
axis.title = element_text(size = 7.5),
axis.text = element_text(size = 7.5))
# Prikaži varijable u prostoru glavnih komponenti
factoextra::fviz_pca_var(procjena_PCA, col.var = "contrib")+
theme(text = element_text(size = 5))
# Prikaži varijable u prostoru glavnih komponenti
factoextra::fviz_pca_var(procjena_PCA, col.var = "contrib")+
theme(text = element_text(size = 5),
axis.title = element_text(size = 2),
axis.text = element_text(size = 7.5))
# Prikaži varijable u prostoru glavnih komponenti
factoextra::fviz_pca_var(procjena_PCA, col.var = "contrib")+
theme(text = element_text(size = 5),
axis.title = element_text(size = 2),
axis.text = element_text(size =2))
# Prikaži varijable u prostoru glavnih komponenti
factoextra::fviz_pca_var(procjena_PCA, col.var = "contrib", labelsize = 3)+
theme(text = element_text(size = 5),
axis.title = element_text(size = 2),
axis.text = element_text(size =2))
# Prikaži varijable u prostoru glavnih komponenti
factoextra::fviz_pca_var(procjena_PCA, col.var = "contrib", labelsize = 3)
# Prikaži varijable u prostoru glavnih komponenti
factoextra::fviz_pca_var(procjena_PCA, col.var = "contrib", labelsize = 2)
# Prikaži na stupčastom grafikonu
factoextra::fviz_contrib(procjena_PCA, choice = "var", axses = 1, top = 10)
fviz_pca_var(procjena_PCA, col.var = group, labelsize = 2,
palette = c("#0073C2FF", "#EFC000FF", "#868686FF"),
legend.title = "cluster")
group_km <- kmeans(vars$coord, centers = 3, nstart = 25)
group <- as.factor(group_km$cluster)
fviz_pca_var(procjena_PCA, col.var = group, labelsize = 2,
palette = c("#0073C2FF", "#EFC000FF", "#868686FF"),
legend.title = "cluster")
factoextra::fviz_pca_var(procjena_PCA, col.var = group, labelsize = 2,
palette = c("#0073C2FF", "#EFC000FF", "#868686FF"),
legend.title = "cluster")
## OPIS DIMENZIJA ##
opis_PCA <- dimdesc(procjena_PCA, axes = c(1,2), proba = 0.05)
head(opis_PCA,10)
## OPIS DIMENZIJA ##
opis_PCA <- FactoMineR::dimdesc(procjena_PCA, axes = c(1,2), proba = 0.05)
head(opis_PCA,10)
inds <- factoextra::get_pca_ind(procjena_PCA) # Stvori IE objekt
# Prikaži doprinos IE
factoextra::fviz_pca_ind(procjena_PCA, col.ind = "cos2",gradient.cols = c("#00AFBB", "#E7B800","#FC4E07"),repel = TRUE)
# Prikaži doprinos IE
factoextra::fviz_pca_ind(procjena_PCA, col.ind = "cos2",gradient.cols = c("#00AFBB", "#E7B800","#FC4E07"),repel = TRUE, labelsize = 3 )
# Prikaži doprinos IE na stupčastom grafikonu
factoextra::fviz_cos2(procjena_PCA, choice = "ind")
factoextra::fviz_cos2(procjena_PCA, choice = "ind",
axses = 1:2) # Prve dvije dimenzije
data(iris)
head(iris,10) # Pogledaj podatke
# Provedi PCA
iris_PCA <- FactoMineR::PCA(iris[,-5], graph = F)
iris_PCA
# Vizualizacija 1
factoextra::fviz_pca_ind(iris_PCA,
geom.ind = "point",
col.ind = iris$Species,
addEllipses = T,
legend.title = "Grupa",
palette = c("#00AFBB", "#E7B800", "#FC4E07"))
# Vizualizacija 2
factoextra::fviz_pca_biplot(iris_PCA,
geom.ind = "point",
col.ind = iris$Species,
addEllipses = T,
legend.title = "Grupa",
palette = "jco",
col.var = "black",
label = "var",
repel = T)
# Vizualizacija 2
factoextra::fviz_pca_biplot(iris_PCA,
geom.ind = "point",
col.ind = iris$Species,
addEllipses = T,
legend.title = "Grupa",
palette = "jco",
col.var = "black",
label = "var",
repel = T,
labelsize = 3)
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=F#, echo=F, warning=F, message=F
)
gcbs <- readRDS("../Podatci/GCBS_data.rds")
str(gcbs)
knitr::include_graphics("../Foto/konstrukti_FA.png")
knitr::include_graphics("../Foto/unidim_FA.png")
EFA_model <- fa(gcbs)
library(psych)
EFA_model <- fa(gcbs)
EFA_model$loadings
fa.diagram(EFA_model)
describe(gcbs)
N <- nrow(gcbs)
indices <- seq(1,N)
indices_EFA <- sample(indices,floor((0.5 * N)))
indices_CFA <- indices[!(indices %in% indices_EFA)]
gcbs_EFA <- gcbs[indices_EFA, ]
gcbs_CFA <- gcbs[indices_CFA, ]
group_var <- vector("numeric", nrow(gcbs))
group_var[indices_EFA] <- 1
group_var[indices_CFA] <- 2
group_var
gcbs_grouped <- cbind(gcbs, group_var)
describeBy(gcbs_grouped, group = group_var)
statsBy(gcbs_grouped, group = "group_var")
lowerCor(gcbs)
corr.test(gcbs, use = "parwise.complete.obs")$p
corr.test(gcbs, use = "pairwise.complete.obs")$p
corr.test(gcbs, use = "pairwise.complete.obs")$ci
alpha(gcbs)
splitHalf(gcbs)
data(bfi)
str(bfi)
knitr::include_graphics("../Foto/bfi_FA.png")
knitr::include_graphics("../Foto/noTheory_FA.png")
bfi_EFA_cor <- cor(bfi_EFA, use = "pairwise.complete.obs")
```{r}
N <- nrow(bfi)
indices <- seq(1, N)
indices_EFA <- sample(indices, floor((.5*N)))
indices_CFA <- indices[!(indices %in% indices_EFA)]
bfi_EFA <- bfi[indices_EFA, ]
bfi_CFA <- bfi[indices_CFA, ]
bfi_EFA_cor <- cor(bfi_EFA, use = "pairwise.complete.obs")
bfi_EFA_cor
head(bfi_EFA_cor,15)
head(bfi_EFA_cor,2)
head(bfi_EFA_cor,4)
scree(bfi_EFA_cor, factors = FALSE)
knitr::include_graphics("../Foto/bfi_FA.png")
knitr::include_graphics("../Foto/eksp_FA.png")
EFA_model <- fa(bfi_EFA, nfactors = 6)
objectEFA_model
EFA_model
FA_model$loadings
EFA_model$loadings
head(EFA_model$scores)
EFA_model <- fa(bfi_EFA, nfactors = 6)
install.packages("GPArotation")
EFA_model <- fa(bfi_EFA, nfactors = 6)
EFA_model
knitr::include_graphics("../Foto/skica_FA.png")
EFA_syn <- structure.sem(EFA_model)
EFA_syn
head(EFA_syn,15)
NEU: N1, N2, N3, N4, N5     #NeuroticismOPE: O1, O2, O3, O4, O5     #Openness"
teoretski_model <- "
teoretski_model <- "
teoretski_model <- "
teoretski_model <- "
AGE: A1, A2, A3, A4, A5     #Agreeableness
CON: C1, C2, C3, C4, C5     #Conscientiousness
EXT: E1, E2, E3, E4, E5     #Extraversion
NEU: N1, N2, N3, N4, N5     #Neuroticism
OPE: O1, O2, O3, O4, O5     #Openness
"
theory_syn <- cfa(text = theory_syn_eq, reference.indicators = FALSE)
library(FactoMineR)
library(factoextra)
library(FactoMineR)
library(tidyverse)  # data manipulation and visualization
library(gridExtra)  # plot arrangement
library(patchwork)
library(ggplot2)
theory_syn <- cfa(text = theory_syn_eq, reference.indicators = FALSE)
library(lavaan)
install.packages("lavaan")
library(lavaan)
theory_syn <- cfa(text = theory_syn_eq, reference.indicators = FALSE)
theory_syn <- cfa(text = teoretski_model, reference.indicators = FALSE)
teoretski_model <- "
AGE: A1, A2, A3, A4, A5     #Agreeableness
CON: C1, C2, C3, C4, C5     #Conscientiousness
EXT: E1, E2, E3, E4, E5     #Extraversion
NEU: N1, N2, N3, N4, N5     #Neuroticism
OPE: O1, O2, O3, O4, O5     #Openness
"
theory_syn <- cfa(text = teoretski_model, reference.indicators = FALSE)
teoretski_model
teoretski_model <- "
teoretski_model <- "
AGE: A1, A2, A3, A4, A5
teoretski_model <- "
AGE: A1, A2, A3, A4, A5,
CON: C1, C2, C3, C4, C5,
EXT: E1, E2, E3, E4, E5,
NEU: N1, N2, N3, N4, N5,
OPE: O1, O2, O3, O4, O5,
"
theory_syn <- cfa(text = teoretski_model, reference.indicators = FALSE)
theory_syn_eq <- "
AGE: A1, A2, A3, A4, A5     #Agreeableness
CON: C1, C2, C3, C4, C5     #Conscientiousness
EXT: E1, E2, E3, E4, E5     #Extraversion
NEU: N1, N2, N3, N4, N5     #Neuroticism
OPE: O1, O2, O3, O4, O5     #Openness
"
theory_syn_eq
theory_syn <- cfa(text = theory_syn_eq, reference.indicators = FALSE)
theory_syn
theory_syn <- cfa(text = theory_syn_eq, reference.indicators = FALSE)
theory_syn_eq <- "
AGE=~ A1 + A2 + A3 + A4 + A5
CON=~ C1 + C2 + C3 + C4 + C5
EXT=~ E1 + E2 + E3 + E4 + E5
NEU=~ N1 + N2 + N3 + N4 + N5
OPE=~ O1 + O2 + O3 + O4 + O5
"
theory_syn <- cfa(text = theory_syn_eq, reference.indicators = FALSE)
EFA_model
EFA_syn <- structure.sem(EFA_model)
head(EFA_syn,15)
theory_syn <- cfa(text = theory_syn_eq, reference.indicators = FALSE)
theory_syn_eq <- '
AGE =~ A1 + A2 + A3 + A4 + A5
CON =~ C1 + C2 + C3 + C4 + C5
EXT =~ E1 + E2 + E3 + E4 + E5
NEU =~ N1 + N2 + N3 + N4 + N5
OPE =~ O1 + O2 + O3 + O4 + O5
'
theory_syn <- cfa(text = theory_syn_eq, reference.indicators = FALSE)
theory_syn <- cfa(text = theory_syn_eq, reference.indicators = FALSE, data = bfi)
HS.model <- ' visual  =~ x1 + x2 + x3
HS.model <- ' visual  =~ x1 + x2 + x3
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- cfa(HS.model, data = HolzingerSwineford1939)
fit
theory_syn
theory_syn_eq <- '
AGE =~ A1 + A2 + A3 + A4 + A5
CON =~ C1 + C2 + C3 + C4 + C5
EXT =~ E1 + E2 + E3 + E4 + E5
NEU =~ N1 + N2 + N3 + N4 + N5
OPE =~ O1 + O2 + O3 + O4 + O5
'
theory_syn <- cfa(text = theory_syn_eq, reference.indicators = FALSE)
?cfa
theory_syn_eq <- '
AGE =~ A1 + A2 + A3 + A4 + A5
CON =~ C1 + C2 + C3 + C4 + C5
EXT =~ E1 + E2 + E3 + E4 + E5
NEU =~ N1 + N2 + N3 + N4 + N5
OPE =~ O1 + O2 + O3 + O4 + O5
'
theory_syn <- cfa(theory_syn_eq, reference.indicators = FALSE)
theory_syn <- cfa(theory_syn_eq)
theory_syn
theory_syn_eq <- "
AGE: A1, A2, A3, A4, A5 #Agreeableness
CON: C1, C2, C3, C4, C5 #Conscientiousness
EXT: E1, E2, E3, E4, E5 #Extraversion
NEU: N1, N2, N3, N4, N5 #Neuroticism
OPE: O1, O2, O3, O4, O  #Openness
"
theory_syn <- sem::cfa(text = theory_syn_eq, reference.indicators = FALSE)
library(sem)
install.packages("sem")
library(sem)
theory_syn <- sem::cfa(text = theory_syn_eq, reference.indicators = FALSE)
theory_syn
theory_CFA <- sem(theory_syn, data = bfi_CFA)
theory_CFA <- sem::sem(theory_syn, data = bfi_CFA)
theory_CFA <- lavaan::sem(theory_syn, data = bfi_CFA)
theory_CFA <- sem(theory_syn, data = bfi_CFA)
str(bfi_CFA)
as.matrix(bfi_CFA)
theory_CFA <- sem(theory_syn, data = as.matrix(bfi_CFA))
theory_CFA <- sem(theory_syn, data = bfi_CFA)
str(theory_syn)
theory_CFA <- sem(theory_syn_eq, data = bfi_CFA)
theory_syn <- sem::cfa(text = theory_syn_eq, reference.indicators = FALSE)
theory_CFA <- sem(theory_syn, data = bfi_CFA)
EFA_CFA <- sem(EFA_syn, data = bfi_CFA)s
EFA_CFA <- sem(EFA_syn, data = bfi_CFA)
summary(EFA_CFA)$BIC
EFA_syn
library(sem)
theory_CFA <- sem(theory_syn, data = bfi_CFA)
