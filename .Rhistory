count(word) %>%
filter(n > 300)
word_counts2 <- tidy_review %>%
count(word) %>%
filter(n > 300) %>%
arrange(desc(n))
word_counts2
tidy_review <- recenzije_Dta %>%
mutate(id = row_number()) %>%
unnest_tokens(word, review) %>%
anti_join(stop_words)
tidy_review <- recenzije_Dta %>%
mutate(id = row_number()) %>%
unnest_tokens(word, review) %>%
anti_join(stop_words)
tidy_review <- recenzije_Dta %>%
mutate(id = row_number()) %>%
unnest_tokens(word, Review) %>%
anti_join(stop_words)
word_counts2 <- tidy_review %>%
count(word) %>%
filter(n > 300) %>%
arrange(desc(n))
word_counts2 <- tidy_review %>%
count(word) %>%
filter(n > 300) %>%
arrange(desc(n))
head(word_counts2,8)
# zekreni osi pomoću coord_flip()
ggplot(word_counts2, aes(x = word, y = n)) +
geom_col() +
coord_flip() +
ggtitle("Review Word Counts")
```{r}
custom_stop_words <- tribble(
~word, ~lexicon,
"roomba", "CUSTOM",
"2", "CUSTOM"
)
stop_words2 <- stop_words %>%
bind_rows(custom_stop_words)
custom_stop_words <- tribble(
~word, ~lexicon,
"roomba", "CUSTOM",
"2", "CUSTOM"
)
stop_words2 <- stop_words %>%
bind_rows(custom_stop_words)
tidy_review <- review_data %>%
mutate(id = row_number()) %>%
select(id, date, product, stars, review) %>%
unnest_tokens(word, review) %>%
anti_join(stop_words2)
tidy_review <- recenzije_Dta %>%
mutate(id = row_number()) %>%
select(id, date, product, stars, review) %>%
unnest_tokens(word, review) %>%
anti_join(stop_words2)
tidy_review <- recenzije_Dta %>%
mutate(id = row_number()) %>%
select(id, date, Product, Stars, Review) %>%
unnest_tokens(word, Review) %>%
anti_join(stop_words2)
tidy_review <- recenzije_Dta %>%
mutate(id = row_number()) %>%
select(id, Date, Product, Stars, Review) %>%
unnest_tokens(word, Review) %>%
anti_join(stop_words2)
tidy_review %>%
filter(word == "roomba")
tidy_review
ggplot(tidy_review, aes(x = word, y = n)) +
geom_col() +
coord_flip() +
ggtitle("Review Word Counts")
# fct_reorder funkcija
word_counts <- tidy_review %>%
count(word) %>%
filter(n > 300) %>%
mutate(word2 = fct_reorder(word, n))
word_counts
head(word_counts,8)
ggplot(word_counts, aes(x = word2, y = n)) +
geom_col() +
coord_flip() +
ggtitle("Review Word Counts")
tidy_review %>%
count(word, Product) %>%
arrange(desc(n))
# Facet grafikoni
```{r}
tidy_review %>%
count(word, product) %>%
group_by(product) %>%
top_n(10, n)
```
tidy_review %>%
count(word, product) %>%
group_by(product) %>%
top_n(10, n)
tidy_review %>%
count(word, Product) %>%
group_by(product) %>%
top_n(10, n)
tidy_review %>%
count(word, Product) %>%
group_by(Product) %>%
top_n(10, n)
tidy_review %>%
count(word, product) %>%
group_by(product) %>%
top_n(10, n) %>%
ungroup()
tidy_review %>%
count(word, Product) %>%
group_by(Product) %>%
top_n(10, n) %>%
ungroup()
tidy_review %>%
count(word, Product) %>%
group_by(Product) %>%
top_n(10, n)
word_counts <- tidy_review %>%
count(word, product) %>%
group_by(product) %>%
top_n(10, n) %>%
ungroup() %>%
mutate(word2 = fct_reorder(word, n))
word_counts <- tidy_review %>%
count(word, Product) %>%
group_by(Product) %>%
top_n(10, n) %>%
ungroup() %>%
mutate(word2 = fct_reorder(word, n))
gg <- ggplot(word_counts, aes(x = word2, y = n, fill = product)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ product, scales = "free_y") +
coord_flip() +
ggtitle("Review Word Counts")
gg
gg <- ggplot(word_counts, aes(x = word2, y = n, fill = Product)) +
geom_col(show.legend = FALSE) +
facet_wrap(~Pproduct, scales = "free_y") +
coord_flip() +
ggtitle("Review Word Counts")
gg <- ggplot(word_counts, aes(x = word2, y = n, fill = Product)) +
geom_col(show.legend = FALSE) +
facet_wrap(~Product, scales = "free_y") +
coord_flip() +
ggtitle("Review Word Counts")
gg
library(wordcloud)
word_counts <- tidy_review %>%
count(word)
wordcloud(
words = word_counts$word,
freq = word_counts$n,
max.words = 30)
---
get_sentiments("bing")
get_sentiments("bing")
get_sentiments("bing") %>%
count(sentiment)
get_sentiments("afinn")
get_sentiments("afinn")
install.packages("textdata ")
library(textdata)
library(textdata)
install.packages("textdata")
library(textdata)
get_sentiments("afinn")
get_sentiments("afinn") %>%
summarize( min = min(value), max = max(value) )
sentiment_counts <- get_sentiments("loughran") %>%
count(sentiment) %>%
mutate(sentiment2 = fct_reorder(sentiment, n))
sentiment_counts <- get_sentiments("loughran") %>%
count(sentiment) %>%
mutate(sentiment2 = fct_reorder(sentiment, n))
ggplot(sentiment_counts, aes(x = sentiment2, y = n)) +
geom_col() +
coord_flip() +
labs(
title = "Sentiment Counts in Loughran",
x = "Counts",
y = "Sentiment"
)
```
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=T, echo=T, warning=F, message=F
)
knitr::opts_hooks$set(fig.callout = function(options) {
if (options$fig.callout) {
options$echo <- FALSE
options$out.height <- "99%"
options$fig.width <- 16
options$fig.height <- 8
}
options
})
library(tidyverse)  # data manipulation and visualization
library(gridExtra)  # plot arrangement
library(ggplot2)
library(tidyverse)
library(dplyr)
library(tidyr)
library(readr)
recenzije_Dta <- read_csv("../Podatci/Roomba Reviews.csv")
head(recenzije_Dta,10)
tidy_review <- recenzije_Dta %>%
unnest_tokens(word, Review)
# unnest_tokens() funkcija
library(tidytext)
tidy_review <- recenzije_Dta %>%
unnest_tokens(word, Review)
head(tidy_review,8)
# unnest_tokens() funkcija
library(tidytext)
tidy_review <- recenzije_Dta %>%
unnest_tokens(word, Review)
head(tidy_review,8)
```
tidy_review <- recenzije_Dta %>%
unnest_tokens(word, Review)
tidy_review <- recenzije_Dta %>%
unnest_tokens(word, Review)
head(tidy_review,8)
tidy_review <- recenzije_Dta %>%
unnest_tokens(word, Review)
head(tidy_review,8)
tidy_review2 <- recenzije_Dta %>%
unnest_tokens(word, Review) %>%
anti_join(stop_words)
tidy_review2 %>%
count(word) %>%
arrange(desc(n))
tidy_review <- recenzije_Dta %>%
mutate(id = row_number()) %>%
unnest_tokens(word, Review) %>%
anti_join(stop_words)
word_counts <- tidy_review %>%
count(word) %>%
arrange(desc(n)) %>%
filter(n<2000)
ggplot(word_counts, aes(x = word, y = n)) +
geom_col()
sentiment_counts <- get_sentiments("loughran") %>%
count(sentiment) %>%
mutate(sentiment2 = fct_reorder(sentiment, n))
gg2 <- ggplot(sentiment_counts, aes(x = sentiment2, y = n)) +
geom_col() +
coord_flip() +
labs(title = "Sentiment Counts in Loughran",
x = "Counts",
y = "Sentiment")
gg2
tidy_review %>%
inner_join(get_sentiments("loughran"))
sentiment_review <- tidy_review %>%
inner_join(get_sentiments("loughran"))
sentiment_review %>%
count(sentiment)
sentiment_review %>% count(word, sentiment) %>% arrange(desc(n)
sentiment_review %>% count(word, sentiment) %>% arrange(desc(n)
sentiment_review <- tidy_review %>%
inner_join(get_sentiments("loughran"))
sentiment_review %>%
count(word, sentiment) %>%
arrange(desc(n))
gg3 <- ggplot(word_counts, aes(x = word2, y = n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ sentiment, scales = "free") +
coord_flip() +
labs(title = "Sentiment Word Counts",
x = "Words")
---
tidy_review %>%
inner_join(get_sentiments("bing")) %>%
count(stars, sentiment)
tidy_review %>%
inner_join(get_sentiments("bing")) %>%
count(stars, sentiment)
tidy_review %>%
inner_join(get_sentiments("bing")) %>%
count(Stars, sentiment)
tidy_review %>%
inner_join(get_sentiments("bing")) %>%
count(stars, sentiment) %>%
spread(sentiment, n)
tidy_review %>%
inner_join(get_sentiments("bing")) %>%
count(Stars, sentiment) %>%
spread(sentiment, n)
tidy_review %>%
inner_join(get_sentiments("bing")) %>%
count(stars, sentiment) %>%
spread(sentiment, n) %>%
mutate(overall_sentiment = positive - negative)
tidy_review %>%
inner_join(get_sentiments("bing")) %>%
count(Stars, sentiment) %>%
spread(sentiment, n) %>%
mutate(overall_sentiment = positive - negative)
sentiment_stars <- tidy_review %>%
inner_join(get_sentiments("bing")) %>%
count(stars, sentiment) %>%
spread(sentiment, n) %>%
mutate(overall_sentiment = positive - negative,
stars = fct_reorder(stars, overall_sentiment))
sentiment_stars <- tidy_review %>%
inner_join(get_sentiments("bing")) %>%
count(Stars, sentiment) %>%
spread(sentiment, n) %>%
mutate(overall_sentiment = positive - negative,
stars = fct_reorder(stars, overall_sentiment))
sentiment_stars <- tidy_review %>%
inner_join(get_sentiments("bing")) %>%
count(Stars, sentiment) %>%
spread(sentiment, n) %>%
mutate(overall_sentiment = positive - negative,
stars = fct_reorder(Stars, overall_sentiment))
sentiment_stars <- tidy_review %>%
inner_join(get_sentiments("bing")) %>%
count(Stars, sentiment) %>%
spread(sentiment, n)
sentiment_stars <- tidy_review %>%
inner_join(get_sentiments("bing")) %>%
count(Stars, sentiment) %>%
spread(sentiment, n) %>%
mutate(overall_sentiment = positive - negative,
stars = fct_reorder(Stars, overall_sentiment))
sentiment_stars <- tidy_review %>%
inner_join(get_sentiments("bing")) %>%
count(Stars, sentiment) %>%
spread(sentiment, n) %>%
mutate(overall_sentiment = positive - negative),
sentiment_stars <- tidy_review %>%
inner_join(get_sentiments("bing")) %>%
count(Stars, sentiment) %>%
spread(sentiment, n) %>%
mutate(overall_sentiment = positive - negative)
sentiment_stars
sentiment_stars <- tidy_review %>%
inner_join(get_sentiments("bing")) %>%
count(Stars, sentiment) %>%
spread(sentiment, n) %>%
mutate(overall_sentiment = positive - negative,
stars = fct_reorder(as.factor(Stars), overall_sentiment))
gg4 <- ggplot(sentiment_stars,
aes(x = stars, y = overall_sentiment, fill = as.factor(Stars))) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Overall Sentiment by Stars",
subtitle = "Reviews for Robotic Vacuums",
x = "Stars",
y = "Overall Sentiment")
gg4
sparse_review
tidy_review %>%
count(word, id) %>%
cast_dtm(id, word, n)
dtm_review <- tidy_review %>%
count(word, id) %>%
cast_dtm(id, word, n) %>%
as.matrix()
dtm_review[1:4, 2000:2004]
library(topicmodels)
lda_out <- LDA(
dtm_review,
k = 2,
method = "Gibbs",
control = list(seed = 42))
lda_out
glimpse(lda_out)
lda_topics <- lda_out %>%
tidy(matrix = "beta")
lda_topics %>%
arrange(desc(beta))
# Software podrška (paketi)
<br>
<br>
```{r, include=TRUE, fig.align="center", echo=FALSE, out.width="500px"}
knitr::include_graphics("../Foto/txt1.png")
```
# anti_join()
<br>
<br>
```{r, include=TRUE, fig.align="center", echo=FALSE, out.width="500px"}
knitr::include_graphics("../Foto/txt3.png")
```
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=T, echo=T, warning=F, message=F
)
knitr::opts_hooks$set(fig.callout = function(options) {
if (options$fig.callout) {
options$echo <- FALSE
options$out.height <- "99%"
options$fig.width <- 16
options$fig.height <- 8
}
options
})
knitr::include_graphics("../Foto/surv_1.png")
install.packages("TH.data")
install.packages("Ecdat")
library()
library(TH.data)
library(Ecdat)
#install.packages("TH.data")
#install.packages("Ecdat")
data(GBSG2, package = "TH.data")
data(UnempDur, package = "Ecdat")
knitr::include_graphics("../Foto/surv_1.png")
time <- c(5, 6, 2, 4, 4)
event <- c(1, 0, 0, 1, 1)
library(survival)
Surv(time, event)
library(survminer)
install.packages("survminer")
library(survminer)
time <- c(5, 6, 2, 4, 4)
event <- c(1, 0, 0, 1, 1)
# Kaplan-Meier
km <- survfit(Surv(time, event) ~ 1)
ggsurvplot(km, conf.int = FALSE,
risk.table = "nrisk_cumevents",
legend = "none")
# Kaplan-Meier
km <- survfit(Surv(time, event) ~ 1)
ggsurvplot(km, conf.int = FALSE,
risk.table = "nrisk_cumevents",
legend = "none")
# Kaplan-Meier
km <- survfit(Surv(time, event) ~ 1)
ggsurvplot(km, conf.int = FALSE,
risk.table = "nrisk_cumevents",
legend = "none")
ggsurvplot(
fit = km,
palette = "blue",
linetype = 1,
surv.median.line = "hv",
risk.table = TRUE,
cumevents = TRUE,
cumcensor = TRUE,
tables.height = 0.1
)
ggsurvplot(km)
Surv(time, event) ~ 1)
Surv(time, event)
wb <- survreg(surv(time, event)~1,data)
wb <- survreg(Surv(time, cens) ~ 1, data = GBSG2)
predict(wb, type = "quantile", p = 1 - 0.9, newdata = data.frame(1))
wb <- survreg(Surv(time, cens) ~ 1)
knitr::include_graphics("../Foto/surv13.png")
knitr::include_graphics("../Foto/surv14.png")
wbmod <- survreg(Surv(time, cens) ~ horTh + tsize, data = GBSG2)
coef(wbmod)
# Odredi kombinacije kontrolnih varijabli
newdat <- expand.grid(
horTh = levels(GBSG2$horTh),
tsize = quantile(GBSG2$tsize, probs = c(0.25, 0.5, 0.75)) )
newdat
---
# Korak 2
## Izračunaj survival krivulje
surv <- seq(.99, .01, by = -.01)
# Korak 2
## Izračunaj survival krivulje
surv <- seq(.99, .01, by = -.01)
t <- predict(wbmod, type = "quantile", p = 1 - surv, newdata = newdat)
dim(t)
t[, 1:7]
# Promijeni oblik
library("reshape2")
surv_wbmod <- melt(surv_wbmod_wide, id.vars = c("horTh", "tsize"),
variable.name = "surv_id", value.name = "time")
# Korak 3
## Napravi data.frame sa survival krivuljom
surv_wbmod_wide <- cbind(newdat, t)
surv_wbmod <- melt(surv_wbmod_wide, id.vars = c("horTh", "tsize"),
variable.name = "surv_id", value.name = "time")
$
surv_wbmod$surv <- surv[as.numeric(surv_wbmod$surv_id)]
surv_wbmod[, c("upper", "lower", "std.err", "strata")] <- NA
# Korak 3
str(surv_wbmod)
# Korak 4
## Prikaži grafički
ggsurvplot_df(surv_wbmod, surv.geom = geom_line,
linetype = "horTh", color = "tsize", legend.title = NULL)
survreg(Surv(time, cens) ~ horTh,
data = GBSG2)
survreg(Surv(time, cens) ~ horTh,
data = GBSG2,
dist = "exponential")
survreg(Surv(time, cens) ~ horTh,
data = GBSG2,
dist = "lognormal")
knitr::include_graphics("../Foto/surv16.png")
knitr::include_graphics("../Foto/surv16.png")
knitr::include_graphics("../Foto/surv17.png")
