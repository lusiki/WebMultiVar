# join sim with terrorists
sim_joint = sim %>%
left_join(teroristi, c("from" = "name")) %>%
left_join(teroristi, c("to" = "name")) %>%
filter(degree.x >= 10, degree.y >= 10) %>%
select(-strength.x, -strength.y)
# join sim with terrorists
sim_joint = sim %>%
left_join(teroristi, c("from" = "name")) %>%
left_join(teroristi, c("to" = "name")) %>%
filter(degree.x >= 10, degree.y >= 10) %>%
select(-strength.x, -strength.y)
# join sim with terrorists
sim_joint = sim %>%
left_join(teroristi, c("from" = "name")) %>%
left_join(teroristi, c("to" = "name")) %>%
filter(degree.x >= 10, degree.y >= 10) %>%
select(-strength.x, -strength.y)
# most similar pairs
head(sim_joint)
sim_joint
View(sim_joint)
S
h
sim = as.tibble(as_data_frame(h, what = "edges")) %>%
mutate(from = as.integer(from), to = as.integer(to)) %>%
arrange(desc(weight))
sim
sim = as.tibble(as_data_frame(h, what = "edges"))
sim
sum(strength(g) == rowSums(A))
h = graph_from_adjacency_matrix(S, mode = "undirected", weighted = TRUE)
h
sim = as.tibble(as_data_frame(h, what = "edges"))
sim
url <- "https://github.com/jessesadler/intro-to-r/blob/master/data/correspondence-data-1585.csv"
epistole <- read_html(url) %>%
html_table(fill = TRUE) %>%
as.data.frame() %>%
select(-1) %>%
row_to_names(1)
View(epistole)
# poveži u jedan objekt
nodes <- full_join(sources, destinations, by = "label")
sources <- epistole %>%
distinct(source) %>%
rename(label = source)
destinations <- epistole %>%
distinct(destination) %>%
rename(label = destination)
sources
destinations
# poveži u jedan objekt
nodes <- full_join(sources, destinations, by = "label")
nodes
# dodaj ID
nodes <- nodes %>% rowid_to_column("id")
nodes
per_route <- epistole %>%
group_by(source, destination) %>%
summarise(weight = n()) %>%
ungroup()
head(per_route,13)
edges <- per_route %>%
left_join(nodes, by = c("source" = "label")) %>%
rename(from = id)
edges
edges <- edges %>%
left_join(nodes, by = c("destination" = "label")) %>%
rename(to = id)
edges
h = graph_from_adjacency_matrix(S, mode = "undirected", weighted = TRUE)
sim = as.tibble(as_data_frame(h, what = "edges")) #%>%
teroristi
sim %>%
anti_join(teroristi, c("from" = "id"))
sim %>%
anti_join(teroristi, c("from" = "name"))
sim %>%
left_join(teroristi, c("from" = "name"))
h = graph_from_adjacency_matrix(A, mode = "undirected", weighted = TRUE)
sim = as.tibble(as_data_frame(h, what = "edges")) #%>%
sim
h = graph_from_adjacency_matrix(S, mode = "undirected", weighted = TRUE)
sim = as.tibble(as_data_frame(h, what = "edges")) #%>%
nodes <- read_csv("../Podatci/names.csv")
nodes <- read_csv("D:/LUKA/Academic/HS/NASTAVA/20-21/WebMultiVar/Podatci/names.csv")
ties <- read_csv("D:/LUKA/Academic/HS/NASTAVA/20-21/WebMultiVar/Podatci/edges.csv")
head(nodes,5)
head(ties,5)
e
terrorists = mutate(terrorists, id = 1:nrow(terrorists)) %>% select(id, everything())
terorists <- read_csv("D:/LUKA/Academic/HS/NASTAVA/20-21/WebMultiVar/Podatci/names.csv")
ties <- read_csv("D:/LUKA/Academic/HS/NASTAVA/20-21/WebMultiVar/Podatci/edges.csv")
terrorists = mutate(terrorists, id = 1:nrow(terrorists)) %>% select(id, everything())
terrorists  <- read_csv("D:/LUKA/Academic/HS/NASTAVA/20-21/WebMultiVar/Podatci/names.csv")
ties <- read_csv("D:/LUKA/Academic/HS/NASTAVA/20-21/WebMultiVar/Podatci/edges.csv")
head(nodes,5)
head(ties,5)
terrorists = mutate(terrorists, id = 1:nrow(terrorists)) %>% select(id, everything())
# make graph
#g = graph_from_data_frame(ties, directed = FALSE, vertices = terrorists)
g = graph_from_data_frame(ties, directed = FALSE, vertices = tibble(1:nrow(terrorists)))
terrorists =
terrorists %>%
mutate(degree = degree(g), strength = strength(g))
# most connected terrorists
arrange(terrorists, desc(degree))
arrange(terrorists, desc(strength))
filter(terrorists, degree == 0)
ggplot(ties, aes(x = from, y = to, color = as.factor(weight))) +
geom_point() +
labs(color = "weigth")
ggplot(ties, aes(x = from, y = to, color = as.factor(weight))) +
geom_point() +
labs(color = "weigth")
terrorists =
terrorists %>%
mutate(degree = degree(g), strength = strength(g))
ggplot(ties, aes(x = from, y = to, color = as.factor(weight))) +
geom_point() +
labs(color = "weigth")
ties
ties
ggplot(ties, aes(x = from, y = to, color = as.factor(weight))) +
geom_point() +
labs(color = "weigth")
ties <- ties %>% rename(from = x, to = y)
ggplot(ties, aes(x = from, y = to, color = as.factor(weight))) +
geom_point() +
labs(color = "weigth")
ties2 = mutate(ties, temp = to, to = from, from = temp) %>% select(-temp)
ties2 = rbind(ties, ties2)
ggplot(ties2, aes(x = from, y = to, color = as.factor(weight))) +
geom_point() +
labs(color = "weigth")
ggplot(ties2, aes(x = from, y = to, alpha = weight)) +
geom_point()
isolated = filter(terrorists, degree == 0)$id
g = delete_vertices(g, isolated)
A = as_adjacency_matrix(g, attr = "weight", sparse = FALSE)
vcount(g)
# similarity as (Pearson) correlation among columns
S = cor(A)
# remove self similarity
S = S + diag(-1, nrow(A))
# some statistics
summary(c(S))
# tidy similarity matrix
h = graph_from_adjacency_matrix(S, mode = "undirected", weighted = TRUE)
sim = as.tibble(as_data_frame(h, what = "edges")) %>%
mutate(from = as.integer(from), to = as.integer(to)) %>%
arrange(desc(weight))
# join sim with terrorists
sim_joint = sim %>%
left_join(terrorists, c("from" = "id")) %>%
left_join(terrorists, c("to" = "id")) %>%
filter(degree.x >= 10, degree.y >= 10) %>%
select(-strength.x, -strength.y)
# most similar pairs
head(sim_joint)
sim = as.tibble(as_data_frame(h, what = "edges"))
sim
h
# Učitaj podatke
teroristi <- read_csv("../Podatci/names.csv")
veze <- read_csv("../Podatci/edges.csv")
head(nodes,5)
head(ties,5)
# Napravi mrežu
g = graph_from_data_frame(ties, directed = FALSE, vertices = tibble(1:nrow(terrorists)))
g # Pregled mreže
# Pregledaj čvorove
V(g)
vcount(g) # Broj čvorova
# Doddaj naziv
g$name <- "Madrid network"
g$name
g
E(g)$weight # Pogledaj weight atribut
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = weight)) +
geom_node_point()
degree(g)
strength(g)
p
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = g$betweenness)) +
geom_node_point()
dist_weight = 1 / E(g)$weight
g$betweenness <- edge_betweenness(g, weights = dist_weight)
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = g$betweenness)) +
geom_node_point()
# Najpovezaniji teroristi
terrorists  <- nodes %>%
mutate(degree = degree(g),
strength = strength(g))
arrange(teroristi, desc(degree))
arrange(terrorists, desc(degree))
# Najpovezaniji teroristi
arrange(terrorists, desc(strength))
# Izolirani teroristi
filter(teroristi,degree == 0)
# Izolirani teroristi
filter(terrorists,degree == 0)
ggplot(ties, aes(x = from, y = to, color = as.factor(weight))) +
geom_point() +
labs(color = "weigth")
# Dodaj recipročne veze
# add reciprocal edges
ties2 = mutate(ties, temp = to, to = from, from = temp) %>% select(-temp)
ties2 = rbind(ties, ties2)
ggplot(ties2, aes(x = from, y = to, color = as.factor(weight))) +
geom_point() +
labs(color = "weigth")
##Pripremi podatke##
# Ukloni izolirane teroriste
isolated = filter(terrorists, degree == 0)$id
g = delete_vertices(g, isolated)
# Napravi adjecany matricu
A = as_adjacency_matrix(g, attr = "weight", sparse = FALSE)
# Sličnost kao Pearsonova korelacija
S = cor(A)
# Ukloni sličnost sa samim sobom
S = S + diag(-1, nrow(A))
# Deskriptiva
summary(c(S))
mutate(from = as.integer(from), to = as.integer(to)) %>%
arrange(desc(weight))
h = graph_from_adjacency_matrix(S, mode = "undirected", weighted = TRUE)
sim = as.tibble(as_data_frame(h, what = "edges")) %>%
mutate(from = as.integer(from), to = as.integer(to)) %>%
arrange(desc(weight))
# join sim with terrorists
sim_joint = sim %>%
left_join(teroristi, c("from" = "name")) %>%
left_join(teroristi, c("to" = "id")) %>%
filter(degree.x >= 10, degree.y >= 10) %>%
select(-strength.x, -strength.y)
# join sim with terrorists
sim_joint = sim %>%
left_join(terrorists, c("from" = "name")) %>%
left_join(terrorists, c("to" = "id")) %>%
filter(degree.x >= 10, degree.y >= 10) %>%
select(-strength.x, -strength.y)
h = graph_from_adjacency_matrix(S, mode = "undirected", weighted = TRUE)
sim = as.tibble(as_data_frame(h, what = "edges")) %>%
mutate(from = as.integer(from), to = as.integer(to)) %>%
arrange(desc(weight))
# join sim with terrorists
sim_joint = sim %>%
left_join(terrorists, c("from" = "name")) %>%
left_join(terrorists, c("to" = "id")) %>%
filter(degree.x >= 10, degree.y >= 10) %>%
select(-strength.x, -strength.y)
# join sim with terrorists
sim_joint = sim %>%
left_join(terrorists, c("from" = "id")) %>%
left_join(terrorists, c("to" = "id")) %>%
filter(degree.x >= 10, degree.y >= 10) %>%
select(-strength.x, -strength.y)
sim = as.tibble(as_data_frame(h, what = "edges")) %>%
mutate(from = as.integer(from), to = as.integer(to)) %>%
arrange(desc(weight))
# join sim with terrorists
sim_joint = sim %>%
left_join(terrorists, c("from" = "id")) %>%
left_join(terrorists, c("to" = "id")) %>%
filter(degree.x >= 10, degree.y >= 10) %>%
select(-strength.x, -strength.y)
terrorists
terrorists
sim
terrorists  <- read_csv("D:/LUKA/Academic/HS/NASTAVA/20-21/WebMultiVar/Podatci/names.csv")
ties <- read_csv("D:/LUKA/Academic/HS/NASTAVA/20-21/WebMultiVar/Podatci/edges.csv")
head(nodes,5)
head(ties,5)
terrorists = mutate(terrorists, id = 1:nrow(terrorists)) %>% select(id, everything())
# make graph
#g = graph_from_data_frame(ties, directed = FALSE, vertices = terrorists)
g = graph_from_data_frame(ties, directed = FALSE, vertices = tibble(1:nrow(terrorists)))
#g = delete_vertex_attr(g, "name")
terrorists =
terrorists %>%
mutate(degree = degree(g), strength = strength(g))
terrorists
# join sim with terrorists
sim_joint = sim %>%
left_join(terrorists, c("from" = "id")) %>%
left_join(terrorists, c("to" = "id")) %>%
filter(degree.x >= 10, degree.y >= 10) %>%
select(-strength.x, -strength.y)
terrorists
sim
with terrorists
terrorists
sim %>%
left_join(terrorists, c("from" = "id"))
# join sim with terrorists
sim_joint = sim %>%
left_join(terrorists, c("from" = "id")) %>%
left_join(terrorists, c("to" = "id")) %>%
filter(degree.x >= 10, degree.y >= 10) %>%
select(-strength.x, -strength.y)
# most similar pairs
head(sim_joint)
h2 = graph_from_data_frame(filter(sim_joint, weight >= 0.60), directed = FALSE, vertices = terrorists)
h2 = delete_vertices(h2, which(degree(h2) == 0))
ggraph(h2) +
geom_edge_link(aes(alpha = weight)) +
geom_node_poi
ggraph(h2) +
geom_edge_link(aes(alpha = weight)) +
geom_node_point() *
theme_bw()
ggraph(h2) +
geom_edge_link(aes(alpha = weight)) +
geom_node_point() +
theme_bw()
ggraph(h2) +
geom_edge_link(aes(alpha = weight)) +
geom_node_point() +
theme_graph()
# Dodaj snagu čvorova
ggraph(h2) +
geom_edge_link(aes(alpha = weight)) +
geom_node_point(aes(size = strength)) +
theme_graph()
V(h2)$betw = betweenness(h2) # dodaj međusobnost u mrežu
ggraph(h2) +
geom_edge_link(aes(alpha = weight)) +
geom_node_point(aes(size = betw)) +
theme_graph()
D = 1-S
# Pretvori u objekt
d = as.dist(D)
# Provedi klastering (average-linkage)
cc = hclust(d, method = "average")
# Pretvori u objekt
d = as.dist(D)
# Provedi klastering (average-linkage)
cc = hclust(d, method = "average")
# Prikaži dendogramom
plot(cc)
clusters.list = rect.hclust(cc, k = 4, border="blue") # Prilagodi grafikon
dendrogram = as.dendrogram(cc)
ggraph(dendrogram, layout = 'dendrogram', circular = TRUE) +
geom_edge_diagonal() +
geom_node_text(aes(filter = leaf, label = label, x = x*1.03, y=y*1.03), size = 3) +
theme_graph()
# Provedi klastering (average-linkage)
cc = hclust(d, method = "average")
rm(list = ls())
# Učitaj podatke
terrorists <- read_csv("../Podatci/names.csv")
ties <- read_csv("../Podatci/edges.csv")
head(nodes,5)
head(terrorists,5)
head(ties,5)
# Prilagodi podatke
terrorists = mutate(terrorists, id = 1:nrow(terrorists)) %>% select(id, everything())
# Napravi mrežu
g = graph_from_data_frame(ties, directed = FALSE, vertices = tibble(1:nrow(terrorists)))
g # Pregled mreže
# Pregledaj čvorove
V(g)
vcount(g) # Broj čvorova
# Doddaj naziv
g$name <- "Madrid network"
g$name
g
E(g)$weight # Pogledaj weight atribut
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = weight)) +
geom_node_point()
degree(g)
strength(g)
dist_weight = 1 / E(g)$weight
g$betweenness <- edge_betweenness(g, weights = dist_weight)
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = g$betweenness)) +
geom_node_point()
# Najpovezaniji teroristi
terrorists  <- nodes %>%
mutate(degree = degree(g),
strength = strength(g))
# Najpovezaniji teroristi
terrorists  <- terrorists %>%
mutate(degree = degree(g),
strength = strength(g))
arrange(terrorists, desc(degree))
# Najpovezaniji teroristi
arrange(terrorists, desc(strength))
# Izolirani teroristi
filter(terrorists,degree == 0)
ties
ggplot(ties, aes(x = x, y = y, color = as.factor(weight))) +
geom_point() +
labs(color = "weigth")
# Dodaj recipročne veze
# add reciprocal edges
ties2 = mutate(ties, temp = to, to = from, from = temp) %>% select(-temp)
ties2 = rbind(ties, ties2)
# Dodaj recipročne veze
# add reciprocal edges
ties2 = mutate(ties, temp = to, to = from, from = temp) %>% select(-temp)
# Dodaj recipročne veze
ties2 = mutate(ties, temp = x, to = y, from = temp) %>% select(-temp)
ties2 = rbind(ties, ties2)
ties
mutate(ties, temp = x, to = y, from = temp)
ties <- ties %>% rename(from = x, to = y) # prilagodi nazive
ggplot(ties, aes(x = from, y = to, color = as.factor(weight))) +
geom_point() +
labs(color = "weigth")
# Dodaj recipročne veze
ties2 = mutate(ties, temp = to, to = from, from = temp) %>% select(-temp)
ties2 = rbind(ties, ties2)
ggplot(ties2, aes(x = from, y = to, color = as.factor(weight))) +
geom_point() +
labs(color = "weigth")
isolated = filter(terrorists, degree == 0)$id
g = delete_vertices(g, isolated)
# Napravi adjecany matricu
A = as_adjacency_matrix(g, attr = "weight", sparse = FALSE)
# Sličnost kao Pearsonova korelacija
S = cor(A)
# Ukloni sličnost sa samim sobom
S = S + diag(-1, nrow(A))
# Deskriptiva
summary(c(S))
# Napravi adjecancy matricu
h = graph_from_adjacency_matrix(S, mode = "undirected", weighted = TRUE)
# Pretvori u data.frame(tibble)
sim = as.tibble(as_data_frame(h, what = "edges")) %>%
mutate(from = as.integer(from), to = as.integer(to)) %>%
arrange(desc(weight))
# join sa podatkovnim skupom terrorists
sim_joint = sim %>%
left_join(terrorists, c("from" = "id")) %>%
left_join(terrorists, c("to" = "id")) %>%
filter(degree.x >= 10, degree.y >= 10) %>%
select(-strength.x, -strength.y)
# Najsličniji parovi
head(sim_joint)
# Najmanje slični parovi
tail(sim_joint)
h2 = graph_from_data_frame(filter(sim_joint, weight >= 0.60), directed = FALSE, vertices = terrorists)
h2 = delete_vertices(h2, which(degree(h2) == 0))
ggraph(h2) +
geom_edge_link(aes(alpha = weight)) +
geom_node_point() +
theme_graph()
# Dodaj snagu čvorova
ggraph(h2) +
geom_edge_link(aes(alpha = weight)) +
geom_node_point(aes(size = strength)) +
theme_graph()
```
# Dodaj nazive čvorova
ggraph(h2) +
geom_edge_link(aes(alpha = weight)) +
geom_node_point() +
geom_node_text(aes(label = name), repel=T) +
theme_graph()
V(h2)$betw = betweenness(h2) # dodaj međusobnost u mrežu
ggraph(h2) +
geom_edge_link(aes(alpha = weight)) +
geom_node_point(aes(size = betw)) +
theme_graph()
# Provedi klastering
# Napravi matricu udaljenosti
D = 1-S
# Pretvori u objekt
d = as.dist(D)
# Provedi klastering (average-linkage)
cc = hclust(d, method = "average")
# Prikaži dendogramom
plot(cc)
clusters.list = rect.hclust(cc, k = 4, border="blue") # Prilagodi grafikon
knitr::include_graphics("../Foto/madrid.jpeg")
knitr::include_graphics("../Foto/madrid.jpg")
knitr::include_graphics("../Foto/net8.png")
# node-list objekt ima jednu varijablu (kolonu) i sadržava ID oznaku za pripadajući edge
node_list <- tibble(id = 1:4)
node_list
node_list
knitr::include_graphics("../Foto/net10.png")
#  edge-list ima minimalno dvije kolone: kolona izvora čvorova (nodes) i kolona smjernica čvorova
#  edge-list objekt može sadržavati i dodatne atribute (varijable)
edge_list <- tibble(from = c(1, 2, 2, 3, 4), to = c(2, 3, 4, 2, 1))
edge_list
node_list_attr <- node_list %>%
mutate(Spol = c("F","F","M","F","M"))
# node-list objekt ima jednu varijablu (kolonu) i sadržava ID oznaku za pripadajući edge
node_list <- tibble(id = 1:5)
# node-list objekt ima jednu varijablu (kolonu) i sadržava ID oznaku za pripadajući edge
node_list <- tibble(id = 1:5)
node_list
node_list_attr <- node_list %>%
mutate(Spol = c("F","F","M","F","M"))
node_list_attr
g = graph_from_data_frame(edge_list, directed = FALSE, vertices = node_list)
g
knitr::include_graphics("../Foto/net5.png")
knitr::include_graphics("../Foto/net6.png")
# get the adjacency matrix of network g
A = as_adjacency_matrix(g)
A = as_adjacency_matrix(g, attr = "weight")
knitr::include_graphics("../Foto/net5.png")
knitr::include_graphics("../Foto/net9.png")
