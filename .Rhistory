plot(pd, type = "profile") + theme_bw()
razlika <- with(zu2, tezina[grupa == "prije"] - tezina[grupa == "nakon"])
shapiro.test(razlika)
# Provedi test
t_zu2 <- t.test(prije, nakon, paired = T)
t_zu2
## Willcox ##
w_zu2 <- wilcox.test(prije, nakon, paired = T)
w_zu2
# Podatci
anova_dta <- PlantGrowth
# Pregled podataka
set.seed(1234)
dplyr::sample_n(anova_dta,10)
glimpse(anova_dta)
levels(anova_dta$group)
# Uredi redosljed faktora
anova_dta$group <- ordered(anova_dta$group,
levels = c("ctrl", "trt1", "trt2"))
# Deskriptivna statistika
group_by(anova_dta, group) %>%
summarise(
count = n(),
mean = mean(weight, na.rm = TRUE),
sd = sd(weight, na.rm = TRUE)
)
# Provedi ANOVA test
procjena_anova_dta <- aov(weight ~ group, data = anova_dta)
summary(procjena_anova_dta)
# Međusobna usporedba prosjeka (varijabli)
TukeyHSD((procjena_anova_dta)) # 1. način
summary(glht(procjena_anova_dta, linfct = mcp(group = "Tukey"))) # 2.način
pairwise.t.test(anova_dta$weight, anova_dta$group, # 3.način
p.adjust.method = "BH")
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=F#, echo=F, warning=F, message=F
)
library(ggpubr)
library(dplyr)
library(Hmisc)
library(corrplot)
library(PerformanceAnalytics)
library(PairedData)
library(multcomp)
library(car)
library(gplots)
dta <- ToothGrowth # Učitaj podatke
summary(dta) # Pregled podataka
dplyr::sample_n(dta, 10) # Pregled podataka
# Pogledaj distribuciju
ggdensity(dta$len,
main = "Distribucija varijable duljina zuba (len)",
xlab = "Duljina zuba")
# Pogledaj QQ plot
ggqqplot(dta$len)
# Provedi Shapiro-Wilk tets
shapiro.test(dta$len)
# Učitaj podatke
cor_dta <- mtcars
head(cor_dta, 10) # Pregled podataka
summary(cor_dta)  # Pregled podataka
str(cor_dta)      # Pregled podataka
# Dijagram raspršivanja
ggscatter(cor_dta, x = "mpg", y = "wt",
add = "reg.line", conf.int = T,
cor.coef = T, cor.method = "pearson",
xlab = "Milje/galon", ylab = "Težina(1k lbs)")
# QQ plot za "mpg"
ggqqplot(cor_dta$mpg, ylab = "MPG")
# QQ plot za "wg
ggqqplot(cor_dta$wt, ylab = "WT")
# Test za "mpg"
shapiro.test(cor_dta$mpg)
# Test za "wt"
shapiro.test(cor_dta$wt)
# Provedi Pearsonov korelacijski test
pearson <- cor.test(cor_dta$mpg, cor_dta$wt,
method = "pearson")
print(pearson) # Pregled rezultata testa
print(pearson$p.value)  # Pregled p-vrijednosti
print(pearson$estimate) # Pregled korelacijskog koeficijenta
# Provedi Spearmanov korelacijski test
spearman <- cor.test(cor_dta$mpg, cor_dta$wt,
method = "spearman")
print(spearman) # Pregled rezultata testa
print(spearman$p.value)  # Pregled p-vrijednosti
print(spearman$estimate) # Pregled korelacijskog koeficijenta
# Učitaj podatke
m_cor_dta <- mtcars[, c(1,3,4,5,6,7)]
head(m_cor_dta,10) #Pregled podataka
cor_mtx <- cor(m_cor_dta) # Izračunaj korelacijsku matricu
round(cor_mtx,2) # Pregled korelacijskih koeficijenata
cor_mtx_pv <- Hmisc::rcorr(as.matrix(m_cor_dta)) # Pripadajuće p-vrijednosti
print(cor_mtx_pv) # Pregled rezultata
# Vizualizacija 1
library(corrplot) # Učitaj paket
corrplot(cor_mtx, type = "upper", order = "hclust", # Korelacijska matrica je input
tl.col = "black", tl.srt = 45)
# Vizualizacija 2
library(PerformanceAnalytics)
chart.Correlation(m_cor_dta, histogram = T, pch = 19)
# Vizualizacija 3
col <- colorRampPalette(c("blue", "green", "red"))(20) # Definiraj boje
heatmap(cor_mtx, col = col, symm = T) # Prikaži heatmap/ input je korelacijska matrica
## t-test ##
set.seed(1234)
# Stvori podatke
t1_dta <- data.frame(
naziv = paste0(rep("M_", 10),1:10),
mjera = round(rnorm(10,20,2),1)
)
# Pogledaj podatke
head(t1_dta, 10)
# Deskriptivna statistika
summary(t1_dta$mjera)
# Pregled podataka
ggboxplot(t1_dta$mjera,
ylab = "Mjera",
xlab = F,
ggtheme = theme_minimal())
# Test normalnosti
shapiro.test(t1_dta$mjera)
# QQ plot
ggqqplot(t1_dta$mjera, ylab = "Mjera",
ggtheme = theme_minimal())
# Provedi t-test (prosjek za usporedbu je 25)
t1_test <- t.test(t1_dta$mjera, mu = 25)
# Prikaži rezultate
print(t1_test)
# Pristupi elementima rezultata
print(t1_test$p.value)
print(t1_test$conf.int)
## Willcoxon test ##
# Provedi test
w1_test <- wilcox.test(t1_dta$mjera, mu = 25)
# Pogledaj rezultate
print(w1_test)
## t-test ##
# Stvori podatke
visina_zene <- c(38.9, 61.2, 73.3, 21.8, 63.4, 64.6, 48.4, 48.8, 48.5)
visina_muskarci <- c(67.8, 60, 63.4, 76, 89.4, 73.3, 67.3, 61.3, 62.4)
# Poveži u DF
nu2 <- data.frame(
grupa = rep(c("Muskarci", "Zene"), each = 9),
tezina = c(visina_zene, visina_muskarci)
)
# Pogledaj podatke
print(nu2)
# Deskriptivna statistika
nu2 %>%
group_by(grupa) %>%
summarise(
broj = n(),
mean = mean(tezina, na.rm = T),
sd = sd(tezina, na.rm = T)
)
# Vizualiziraj podatke
ggboxplot(nu2, x = "grupa", y = "tezina",
color = "grupa",
ylab = "tezina", xlab = "grupe")
# Testiraj normalnost distribucije
with(nu2, shapiro.test(tezina[grupa == "Muskarci"]))
with(nu2,shapiro.test(tezina[grupa == "Zene"]))
# Testiraj jednakost varijanci
eq_var_nu2 <- var.test(tezina ~ grupa, data = nu2)
print(eq_var_nu2)
# Provedi test
t_nu2 <- t.test(visina_muskarci, visina_zene, var.equal = T)
print(t_nu2)
# Alternativni nacin
a_t_nu2 <- t.test(tezina ~ grupa, data = nu2, var.equal = T)
print(a_t_nu2)
## Wilcoxon test ##
# Provedi test
w_nu2 <- wilcox.test(visina_muskarci, visina_zene)
print(w_nu2, 10)
## t-test ##
# Napravi podatke
prije <- c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
nakon <- c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Poveži u DF
zu2 <- data.frame(
grupa = rep(c("prije", "nakon"), each = 10),
tezina = c(prije, nakon)
)
# Pregled podataka
head(zu2,10)
# Deskriptivna statistika
zu2 %>%
group_by(grupa) %>%
summarise(
broj = n(),
mean = mean(tezina, na.rm = T),
sd = sd(tezina, na.rm = T)
)
# Vizualizacija 1
ggboxplot(zu2, x = "grupa", y = "tezina",
color = "grupa", palette = c("#00AFBB", "#E7B800"),
order = c("prije", "nakon"),
ylab = "Tezina", xlab = "Grupe")
# Vizualizacija 2
prije <- subset(zu2, grupa == "prije", tezina, drop =  T)
nakon <- subset(zu2, grupa == "nakon", tezina, drop = T)
pd <- paired(prije, nakon)
plot(pd, type = "profile") + theme_bw()
# Provjeri normalnost
razlika <- with(zu2, tezina[grupa == "prije"] - tezina[grupa == "nakon"])
shapiro.test(razlika)
# Provedi test
t_zu2 <- t.test(prije, nakon, paired = T)
t_zu2
## Willcox ##
w_zu2 <- wilcox.test(prije, nakon, paired = T)
w_zu2
## JEDNOSTRANA ANOVA ##
# Podatci
anova_dta <- PlantGrowth
# Pregled podataka
set.seed(1234)
dplyr::sample_n(anova_dta,10)
glimpse(anova_dta)
levels(anova_dta$group)
# Uredi redosljed faktora
anova_dta$group <- ordered(anova_dta$group,
levels = c("ctrl", "trt1", "trt2"))
# Deskriptivna statistika
group_by(anova_dta, group) %>%
summarise(
count = n(),
mean = mean(weight, na.rm = TRUE),
sd = sd(weight, na.rm = TRUE)
)
# Vizualizacija 1
ggboxplot(anova_dta, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c("ctrl", "trt1", "trt2"),
ylab = "Težina", xlab = "Tretman")
# Vizualizacija 2
ggline(anova_dta, x = "group", y = "weight",
add = c("mean_se", "jitter"),
order = c("ctrl", "trt1", "trt2"),
ylab = "Weight", xlab = "Treatment")
# Provedi ANOVA test
procjena_anova_dta <- aov(weight ~ group, data = anova_dta)
summary(procjena_anova_dta)
# Homogenost varijance
plot(procjena_anova_dta,1) # Vizualna inspekcija
leveneTest(weight ~ group, data = anova_dta) # Formalni test
# Normalnost distribucije
plot(procjena_anova_dta,2) # Vizualna inspekcija
reziduali <- residuals(object = procjena_anova_dta) # Uzmi rezidualne vrijednosti
shapiro.test(x = reziduali) # Provedi S-H test
# Provedi neparametarski test(Kruskal-Wallis)
kruskal.test(weight ~ group, data = anova_dta)
# Učitaj podatke
F_dta <- ToothGrowth
# Pregled podataka
dplyr::sample_n(F_dta,10)
# Provedi F-test
procjena_F_dta <- var.test(len ~ supp, data = F_dta)
print(procjena_F_dta)
# Pogledaj omjer varijanci
procjena_F_dta$estimate
# p-vrijednost
procjena_F_dta$p.value
# Učitaj podatke
mv_dta <- PlantGrowth
# Pregledaj podatke
str(mv_dta)
# Provedi Barlett test
b_mv_dta <- bartlett.test(weight ~ group, data = mv_dta)
b_mv_dta
```{r}
# Provedi Barlett test za više nezavisnih varijabli; interaction() to collapse
bartlett.test(len ~ interaction(supp,dose), data = ToothGrowth)
# Provedi Levene test za jednu nezavisnu varijablu
leveneTest(weight ~ group, data = mv_dta)
# Provedi Levene test za više nezavisnih varijabli
leveneTest(len ~ interaction(supp,dose), data = ToothGrowth)
# Provedi Fligner-Killen test
fligner.test(weight ~ group, data = mv_dta)
# Deskriptivna statistika
group_by(anova2_dta, supp, dose) %>%
summarise(
count = n(),
mean = mean(len, na.rm = TRUE),
sd = sd(len, na.rm = TRUE)
)
# Učitaj podatke
anova2_dta <- ToothGrowth
# Pregled podataka
dplyr::sample_n(anova2_dta, 10)
str(anova2_dta)
# Uredi podatke za analizu
anova2_dta$dose <- factor(anova2_dta$dose,
levels = c(0.5, 1, 2),
labels = c("D_0.5", "D_1", "D_2"))
dplyr::sample_n(anova2_dta, 10) # Pregledaj
# Deskriptivna statistika
group_by(anova2_dta, supp, dose) %>%
summarise(
count = n(),
mean = mean(len, na.rm = TRUE),
sd = sd(len, na.rm = TRUE)
)
# Tabuliraj podatke
table(anova2_dta$supp, anova2_dta$dose)
# Provedi test
procjena_anova2_dta <- aov(len ~ supp + dose, data = anova2_dta)
summary(procjena_anova2_dta)
# Test sa interakcijskim regresorom
procjena_anova3_dta <- aov(len ~ supp + dose + supp:dose, data = anova2_dta)
summary(procjena_anova3_dta)
# Međusobna usporedba prosjeka (varijabli)
TukeyHSD(procjena_anova3_dta, which = "dose") # 1. način
summary(glht(procjena_anova3_dta, lincft = mcp(dose = "Tukey"))) # 2. način
# Provjera pretpostavki
plot(procjena_anova3_dta,1) # Homogenost varijance
leveneTest(len ~ supp*dose, data = anova2_dta) # Formalni tetst
# Stvori podatke
sparoge <- c(81,50,27)
# Provedi test
procjena_sparoge <- chisq.test(sparoge, p = c(1/3, 1/3, 1/3))
# Pogledaj rezulatate
procjena_sparoge
# Pogledaj očekivane vrijednosti
procjena_sparoge$expected
# Odredi duge vjerojatnosti
procjena_sparoge2 <- chisq.test(sparoge, p = c(1/2, 1/3, 1/6))
procjena_sparoge2
# Pogledaj p.vrijednosti
procjena_sparoge2$p.value
# Ucitaj podatke
file_path <- "http://www.sthda.com/sthda/RDoc/data/housetasks.txt"
kucniPoslovi <- read.delim(file_path, row.names = 1)
kucniPoslovi # Pogledaj podatke
# Pogledaj kontigencijsku tablicu
kt <- as.table(as.matrix(kucniPoslovi))
gplots::balloonplot(t(kt), main = "kucniPoslovi", # 1. način
xlab = "", ylab = "",
label = F, show.margins = F)
# Provedi Chi-sq
procjena_kucniPoslovi <- chisq.test(kucniPoslovi)
procjena_kucniPoslovi
# Opažene vrijednosti
procjena_kucniPoslovi$observed
procjena_kucniPoslovi
# Opažene vrijednosti
procjena_kucniPoslovi$observed
# Očekivane vrijednosti
round(procjena_kucniPoslovi$expected,2)
# Očekivane vrijednosti
round(procjena_kucniPoslovi$expected,2)
# Prikaži reziduale
round(procjena_kucniPoslovi$residuals,2)
# Grafički prikaz
corrplot(procjena_kucniPoslovi$residuals, is.cor = F)
# Izracunaj doprinos Chi_sq statistici
doprinos <- 100*procjena_kucniPoslovi$residuals^2/procjena_kucniPoslovi$statistic
round(doprinos,2)
corrplot(doprinos, is.cor = F)
load(file.path("../Podatci/parenthood.Rdata"))
drawBasicScatterplot <- function(dotcol,title) {
plot( parenthood$dan.sleep,
parenthood$dan.grump,
xlab = "Sati spavanja",
ylab = "Raspoloženje (0-100)",
col= dotcol,
main = title,
font.main=1,
pch=19)
}
# scatterplot only
drawBasicScatterplot( "black", "Odnos raspoloženja i spavanja")
# Najbolji regresijski pravac
drawBasicScatterplot( emphGrey, "Najbolji regresijski pravac" )
# Najbolji regresijski pravac
drawBasicScatterplot( emphGrey, "Najbolji regresijski pravac" )
good.coef <- lm( dan.grump ~ dan.sleep, parenthood)$coef
abline( good.coef, col=ifelse(colour,emphCol,"black"), lwd=3 )
# Najbolji regresijski pravac
drawBasicScatterplot( emphGrey, "Najbolji regresijski pravac" )
regressionImg <- list()
emphCol <- rgb(0,0,1)
emphColLight <- rgb(.5,.5,1)
emphGrey <- grey(.5)
eps <- TRUE
colour <- TRUE
width <- 6
height <- 6
load(file.path("../Podatci/parenthood.Rdata"))
drawBasicScatterplot <- function(dotcol,title) {
plot( parenthood$dan.sleep,
parenthood$dan.grump,
xlab = "Sati spavanja",
ylab = "Raspoloženje (0-100)",
col= dotcol,
main = title,
font.main=1,
pch=19)
}
# scatterplot only
drawBasicScatterplot( "black", "Odnos raspoloženja i spavanja")
# Najbolji regresijski pravac
drawBasicScatterplot( emphGrey, "Najbolji regresijski pravac" )
good.coef <- lm( dan.grump ~ dan.sleep, parenthood)$coef
abline( good.coef, col=ifelse(colour,emphCol,"black"), lwd=3 )
# Najbolji regresijski pravac
drawBasicScatterplot( emphGrey, "Najbolji regresijski pravac" )
good.coef <- lm( dan.grump ~ dan.sleep, parenthood)$coef
abline( good.coef, col=ifelse(colour,emphCol,"black"), lwd=3 )
# Loš regresijski pravac
drawBasicScatterplot( emphGrey, "Loš regresijski pravac!" )
bad.coef <- c(80,-3)
abline( bad.coef, col=ifelse(colour,emphCol,"black"), lwd=3 )
drawBasicScatterplot( emphGrey, "Regresijska linija" )
abline( good.coef, col=ifelse(colour,emphCol,"black"), lwd=3 )
for(i in seq_along(parenthood$dan.sleep)) {
xval <- parenthood$dan.sleep[i]*c(1,1)
yval <- c(parenthood$dan.grump[i],good.coef[1]+good.coef[2]*parenthood$dan.sleep[i])
lines(xval,yval,type='l', col = emphGrey)
}
drawBasicScatterplot( emphGrey, "Loša regresijska linija" )
abline( good.coef, col=ifelse(colour,emphCol,"black"), lwd=3 )
for(i in seq_along(parenthood$dan.sleep)) {
xval <- parenthood$dan.sleep[i]*c(1,1)
yval <- c(parenthood$dan.grump[i],good.coef[1]+good.coef[2]*parenthood$dan.sleep[i])
lines(xval,yval,type='l', col = emphGrey)
}
drawBasicScatterplot( emphGrey, "Regresijska linija" )
abline( good.coef, col=ifelse(colour,emphCol,"black"), lwd=3 )
for(i in seq_along(parenthood$dan.sleep)) {
xval <- parenthood$dan.sleep[i]*c(1,1)
yval <- c(parenthood$dan.grump[i],good.coef[1]+good.coef[2]*parenthood$dan.sleep[i])
lines(xval,yval,type='l', col = emphGrey)
}
# Procjeni regresijski model i spremi rezultate u objekt
regression.1 <- lm( formula = dan.grump ~ dan.sleep,
data = parenthood )
```{r}
# Pogledaj rezultate
print( regression.1 )
knitr::include_graphics(file.path("../Foto/scatter3d.png"))
# Provedi višestruku regresiju u R
regression.2 <- lm( formula = dan.grump ~ dan.sleep + baby.sleep,
data = parenthood )
# Pregledaj rezultate
print(regression.2)
```{r}
```{r}
X <- parenthood$dan.sleep  # Nezavisna varijabla
Y <- parenthood$dan.grump  # Zavisna varijabla
# Procijenjene vrijednosti
Y.pred <- -8.94 * X  +  125.97
# Izračunaj sumu rezidualnih odstupanja
SS.resid <- sum((Y - Y.pred)^2)
print(SS.resid) # Prikaži
# Izračunaj sumu ukupnih odstupanja
SS.tot <- sum((Y - mean(Y)^2))
print(SS.tot) # Prikaži
# Pogledaj rezultate modela
print( regression.2 )
# Pogledaj rezultate
summary(regression.2)
knitr::include_graphics(file.path("../Foto/outlier.png"))
# Izračunaj mjeru Cook-ove udaljenosti
cooks.distance( model = regression.2 )
# Prikaži Cook-ovu mjeru grafički
plot(x = regression.2, which = 4)
lm(formula = dan.grump ~ dan.sleep + baby.sleep,
data = parenthood,
subset = -64)
# Provedi test homogenosti varijance
car::ncvTest(regression.2)
# Provedi drugi test varijance
library(car)
lmtest::coeftest( regression.2, vcov= hccm )
# Provedi test
vif( mod = regression.2 )
# Pogledaj korelaciju
cor( parenthood )
.
# Specificiraj puni model
full.model <- lm(formula = dan.grump ~ dan.sleep + baby.sleep + day,
data = parenthood)
# Selekcija unatrag
step(object = full.model,
direction = "backward")
# Procijeni osnovni model
nul.model <- lm(dan.grump ~ 1, parenthood)
# Definiraj selekcijsku funkciju (unaprijed)
step(object = nul.model,
direction = "forward",
scope = dan.grump ~ dan.sleep + baby.sleep + day)
---
# Procjeni dva ugnježdena modela
M0 <- lm( dan.grump ~ dan.sleep + day, parenthood )
M1 <- lm( dan.grump ~ dan.sleep + day + baby.sleep, parenthood )
# Usporedi modele
AIC( M0, M1 )
# Procjeni dva ugnježdena modela
M0 <- lm( dan.grump ~ dan.sleep + day, parenthood )
M1 <- lm( dan.grump ~ dan.sleep + day + baby.sleep, parenthood )
# Usporedi modele
AIC( M0, M1 )
# Provedi hijerarhijsku regresiju
anova(M0, M1)
