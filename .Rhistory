EFA_CFA <- sem(EFA_syn, data = bfi_CFA)
summary(EFA_CFA)$BIC
EFA_syn
library(sem)
theory_CFA <- sem(theory_syn, data = bfi_CFA)
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=F#, echo=F, warning=F, message=F
)
knitr::include_graphics("../Foto/skica_FA.png")
knit_gv('
Factor -> a
Factor -> b
Factor -> c
Factor -> d
a[shape=rectangle]
b[shape=rectangle]
c[shape=rectangle]
d[shape=rectangle]
')
install.packages("DiagrammeR")
install.packages("DiagrammeRsvg")
library(DiagrammeR)
library(DiagrammeRsvg)
knit_gv <- function(code, filename=NULL, width=NULL, height=800){
assetpath <- "assets"
dir.create(assetpath, showWarnings = F)
if (!is.character(knitr::current_input())){
format <- "png"
} else {
if (stringr::str_detect(
knitr::opts_knit$get("rmarkdown.pandoc.to"), "beamer|latex|pdf")) {
format <- "pdf"
} else {
format <- "png"
}
}
if (!is.character(filename)){
filename <- file.path(assetpath, paste0(sample(1e6:1e7, 1), ".", format))
} else {
filename = paste0(filename, ".", format)
}
library('rsvg')
outfun <- get(paste0("rsvg_", format))
capture.output({
g <- grViz(paste("digraph{", code, "}"))
DiagrammeRsvg::export_svg(g) %>% charToRaw %>% outfun(filename, width=width, height=height)
},  file='NUL')
knitr::include_graphics(filename)
}
knit_gv('
Factor -> a
Factor -> b
Factor -> c
Factor -> d
a[shape=rectangle]
b[shape=rectangle]
c[shape=rectangle]
d[shape=rectangle]
')
install.packages("rsvg")
knit_gv('
Factor -> a
Factor -> b
Factor -> c
Factor -> d
a[shape=rectangle]
b[shape=rectangle]
c[shape=rectangle]
d[shape=rectangle]
')
knit_gv('
Affective -> a
Affective -> b
Affective -> c
Cognitive -> d
Cognitive -> e
Cognitive -> f
Affective -> Cognitive:nw [dir=both]
a [shape=box]
b [shape=box]
c [shape=box]
d [shape=box]
e [shape=box]
f [shape=box]
')
library(FactoMineR)
library(factoextra)
library(FactoMineR)
library(tidyverse)  # data manipulation and visualization
library(gridExtra)  # plot arrangement
library(patchwork)
library(ggplot2)
library(lavaan)
library(sem)
hz <- lavaan::HolzingerSwineford1939
hz %>% glimpse()
hz.model <- '
visual =~ x1 + x2 + x3
writing =~ x4 + x5 + x6
maths =~ x7 + x8 + x9'
semPlot::semPaths(hz.fit)
install.packages("semPlot")
library(semPlot)
semPlot::semPaths(hz.fit)
hz.fit <- cfa(hz.model, data=hz)
hz.model <- '
visual =~ x1 + x2 + x3
writing =~ x4 + x5 + x6
maths =~ x7 + x8 + x9
'
hz.fit <- cfa(hz.model, data=hz)
hz <- lavaan::HolzingerSwineford1939
hz %>% glimpse()
hz.fit <- cfa(hz.model, data=hz)
hz.fit <- sem::cfa(hz.model, data=hz)
hz.model
hz.fit <- lavaan::cfa(hz.model, data=hz)
summary(hz.fit, standardized=TRUE)
semPlot::semPaths(hz.fit)
semPlot::semPaths(hz.fit, "std")
fitmeasures(hz.fit, c('cfi', 'rmsea', 'rmsea.ci.upper', 'bic'))
hz %>% dplyr::glimpse()
lavaan::fitmeasures(hz.fit, c('cfi', 'rmsea', 'rmsea.ci.upper', 'bic'))
# Procedura razvoja konstrukta
<br>
<br>
- Odredi elemente konstrukta
- Prikupi podatke
- Upoznaj se sa podatcima
- Odluka što koristiti EFA, CFA ili obje analize
- Podijeli uzorak u dva (slučajna; *random*) dijela (za obje)
- Usporedi uzorke
dplyr::describe(gcbs)
psych::describe(gcbs)
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=F#, echo=F, warning=F, message=F
)
hz <- lavaan::HolzingerSwineford1939
hz %>% dplyr::glimpse()
library(FactoMineR)
library(factoextra)
library(FactoMineR)
library(tidyverse)  # data manipulation and visualization
library(gridExtra)  # plot arrangement
library(patchwork)
library(ggplot2)
library(lavaan)
library(sem)
library(semPlot)
library(tidyverse)
library(dplyr)
hz %>% dplyr::glimpse()
hz.model <- '
visual =~ x1 + x2 + x3
writing =~ x4 + x5 + x6
maths =~ x7 + x8 + x9
'
hz.fit <- lavaan::cfa(hz.model, data=hz)
summary(hz.fit, standardized=TRUE)
hz.fit
summary(hz.fit, standardized=TRUE)
hz.fit
summary(hz.fit)
lavaan::cfa(hz.model, data=hz)
hz.fit
lavaan::summary(hz.fit, fit.measures=TRUE)
**Format predavanja:** [.html](https://github.com/lusiki/WebMultiVar/blob/main/Predavanja/05_FA.html) | [.Rmd](https://github.com/lusiki/WebMultiVar/blob/main/Predavanja/05_FA.Rmd)
<br>
**Čitanje:** [Faktorska analiza]("../Literatura/Faktorska_analiza.pdf") + []()
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=F#, echo=F, warning=F, message=F
)
data(bfi)
library(FactoMineR)
library(factoextra)
library(FactoMineR)
library(tidyverse)  # data manipulation and visualization
library(gridExtra)  # plot arrangement
library(patchwork)
library(ggplot2)
library(lavaan)
library(sem)
library(semPlot)
library(tidyverse)
library(dplyr)
data(bfi)
# učitaj paket
library(psych)
data(bfi)
names(bfi)
# Faktorabilnost
<br>
<br>
.pull-left[
- `Barlett sphericity` test (BS)
bfi_hetcor <- hetcor(bfi[,1:25])
library(polycor)
install.packages("polycor")
library(polycor)
# Faktorabilnost
<br>
<br>
.pull-left[
- `Barlett sphericity` test (BS)
bfi_hetcor <- ploycor::hetcor(bfi[,1:25])
# Faktorabilnost
<br>
<br>
.pull-left[
- `Barlett sphericity` test (BS)
bfi_hetcor <- polycor::hetcor(bfi[,1:25])
bfi_faktorablinost <- cortest.bartlett(bfi_c) # Barlett test
bfi_c <- bfi_hetcor$correlations # kor- matrica
bfi_faktorablinost <- cortest.bartlett(bfi_c) # Barlett test
bfi_c
bfi_c <- bfi_hetcor$correlations # kor- matrica
bfi_faktorablinost <- cortest.bartlett(bfi_c) # Barlett test
bfi_c
bfi_c$chisq
bfi_faktorablinost
KMO(bfi_c)
library(GPArotation))
library(GPArotation)
library(GPArotation)
``{r}
# EFA sa 3 faktora
f_bfi_minres <- fa(bfi_c,nfactors = 3,rotate = "none")
# Sortiraj komunalnosti
f_bfi_minres_common <- sort(f_bfi_minres$communality,decreasing = TRUE)
# Pregled
data.frame(f_bfi_minres_common)
# Sortiraj jedinstvenosti
f_bfi_minres_unique <- sort(f_bfi_minres$uniqueness,decreasing = TRUE)
# Pregled
data.frame(f_bfi_minres_unique)
?fe
??fe
# MLE factor extraction.
f_bfi_mle <- fa(bfi_c, nfactors = 3, fm ="ml"
# Sorted communality of the f_bfi_mle.
f_bfi_mle_common <- sort(
# MLE ekstrakcija
f_bfi_mle <- fa(bfi_c, nfactors = 3, fm ="ml"
# Sortiraj komunalnost
f_bfi_mle_common <- sort(f_bfi_mle$communality,decreasing = TRUE)
# Sortiraj komunalnost
f_bfi_mle_common <- sort(f_bfi_mle$communality,decreasing = TRUE)
# MLE ekstrakcija
f_bfi_mle <- fa(bfi_c, nfactors = 3, fm ="ml")
# Sortiraj komunalnost
f_bfi_mle_common <- sort(f_bfi_mle$communality,decreasing = TRUE)
# Pregled
data.frame(f_bfi_mle_common)
fa.parallel(bfi_c, n.obs = 200,fa = "fa", fm = "minres")
fa.parallel(bfi_c, n.obs = 200,fa = "fa", fm = "mle") # MLE metoda
knitr::include_graphics("../Foto/roto_FA.png")
f_bfi_varimax <- fa(bfi_c,fm = "minres",nfactors = 5,rotate = "varimax")
f_bfi_varimax
```{r, include=TRUE, fig.align="center", echo=FALSE, out.width="350px"}
knitr::include_graphics("../Foto/varimax_FA.png")
knitr::include_graphics("../Foto/varimax_FA.png")
knitr::include_graphics("../Foto/varimax_FA.png")
knitr::include_graphics("../Foto/varimax_FA.png")
fa.diagram(f_bfi_varimax)
print(f_bfi_varimax$loadings, cut=0)
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=F#, echo=F, warning=F, message=F
)
knitr::include_graphics("../Foto/klaster2.png")
knitr::include_graphics("../Foto/klast.png")
knitr::include_graphics("../Foto/klast2.png")
knitr::include_graphics("../Foto/klast3.png")
knitr::include_graphics("../Foto/klast4.png")
knitr::include_graphics("../Foto/klast5.png")
knitr::include_graphics("../Foto/klastTok.png")
knitr::include_graphics("../Foto/klasterTok.png")
knitr::include_graphics("../Foto/klastDist1.png")
knitr::include_graphics("../Foto/klastDist8.png")
knitr::include_graphics("../Foto/klastDist9.png")
knitr::include_graphics("../Foto/klastDist8.png")
knitr::include_graphics("../Foto/klastDist9.png")
three_players <- data.frame(X = c(0,9,-2), Y = c(0,12,19), row.names = c("BLUE", "RED", "GREEn"))
print(three_players)
dist(three_players)
visinaTezina <- data.frame(Height = c(0,9,-2),
Weight = c(0,12,19),
row.names = c(1,2,3))
print(visinaTezina)
kable(visinaTezina)
scale(visinaTezina)
visinaTezina <- data.frame(Height = c(6,6,8),
Weight = c(200,202,200),
row.names = c(1,2,3))
print(visinaTezina)
scale(visinaTezina)
knitr::include_graphics("../Foto/klastVisina.png")
knitr::include_graphics("../Foto/klastVisina2.png")
knitr::include_graphics("../Foto/klastVisina3.png")
knitr::include_graphics("../Foto/klastDist.png")
knitr::include_graphics("../Foto/klastDist10.png")
knitr::include_graphics("../Foto/klastDist11.png")
knitr::include_graphics("../Foto/klastDist10.png")
knitr::include_graphics("../Foto/klastDist11.png")
napitci <- data.frame(vino = c("TRUE","FALSE"),
pivo = c("TRUE","TRUE"),
viski = c("FALSE","TRUE"),
votka = c("FALSE", "TRUE"))
kable(napitci)
print(napitci)
dist(napitci, method = "binary")
dist(napitci, method = "binary")
dist(napitci, method = "jaccard")
dist(napitci)
zadovoljstvoPoslom <- data.frame(
zadovoljstvo = c("Nisko","Nisko","Visoko","Nisko","Srednje"),
sreća = c("Ne","Ne","Da","Ne","Ne"))
kable(zadovoljstvoPoslom)
dist(zadovoljstvoPoslom)
dist(zadovoljstvoPoslom, method = "binary")
dist(zadovoljstvoPoslom, method = "binary")
library(dummies)
install.packages("dummies")
library(dummies)
dummieZadovoljstvo <- dummy.data.frame(zadovoljstvoPoslom)
dist(zadovoljstvoPoslom, method = "binary") # Udaljenost za kategorije
stats::dist(zadovoljstvoPoslom, method = "binary") # Udaljenost za kategorije
stats::distance(zadovoljstvoPoslom, method = "binary") # Udaljenost za kategorije
distance(zadovoljstvoPoslom, method = "binary") # Udaljenost za kategorije
install.packages("philentropy ")
distance(zadovoljstvoPoslom, method = "binary") # Udaljenost za kategorije
library(philentropy)
library(philentropy)
dist(dummieZadovoljstvo, method = "binary") # Udaljenost za kategorije
dummieZadovoljstvo
print(dummieZadovoljstvo)
print(zadovoljstvoPoslom)
dist(zadovoljstvoPoslom, method = "binary") # Udaljenost za kategorije
print(zadovoljstvo)
zadovoljstvo <- data.frame(
zadovoljstvo = c("Nisko","Nisko","Visoko","Nisko","Srednje"),
sreća = c("Ne","Ne","Da","Ne","Ne"))
kable(zadovoljstvo)
```{r}
dist(dummieZadovoljstvo, method = "binary") # Udaljenost za kategorije
knitr::include_graphics("../Foto/klastH1.png")
knitr::include_graphics("../Foto/klastH2.png")
knitr::include_graphics("../Foto/klastIZ1.png")
igraci <-  data.frame(X = c(-1,-2,8,7,-12,-15),
Y = c(1,-3,6,-8,8,0))
print(igraci)
dist_igraci <- dist(igraci, method = "euclidean")
klasteri <- cutree(hc_igraci, k = 2)
print(klasteri)
igraci <-  data.frame(X = c(-1,-2,8,7,-12,-15),
Y = c(1,-3,6,-8,8,0))
print(igraci)
dist_igraci <- dist(igraci, method = "euclidean") # Izračunaj udaljenost
hc_igraci <- hclust(dist_igraci, method = 'complete') # Provedi klastering
klasteri <- cutree(hc_igraci, k = 2)
print(klasteri)
igraciKlasteri<- mutate(igraci, cluster = klasteri)
library(tidyverse)  # data manipulation and visualization
library(gridExtra)  # plot arrangement
library(ggplot2)
library(tidyverse)
library(dplyr)
igraciKlasteri<- mutate(igraci, cluster = klasteri) # Prilagodba
print(igraciKlasteri)
ggplot(igraciKlasteri, aes(x = x, y = y, color = factor(klasteri)
ggplot(igraciKlasteri, aes(x = x, y = y, color = factor(klasteri)) +
ggplot(igraciKlasteri, aes(x = x, y = y, color = factor(klasteri))) +
geom_point()
ggplot(igraciKlasteri, aes(x = X, y = Y, color = factor(klasteri))) +
geom_point()
ggplot(igraciKlasteri, aes(x = X, y = Y, color = factor(klasteri))) +
geom_point() +
ggtitle("Igrači i klasteri u koordinatnom sustavu")
knitr::include_graphics("../Foto/klastDend1.png")
knitr::include_graphics("../Foto/klastDend8.png")
knitr::include_graphics("../Foto/klastDend9.png")
plot(hc_igraci)
knitr::include_graphics("../Foto/klastDend9.png")
knitr::include_graphics("../Foto/klastDend10.png")
install.packages("dendextend")
library(dendextend)
dend_igraci <- as.dendrogram(hc_igraci)
dend_boje <- color_branches(dend_igraci, h = 15)
plot(dend_boje)
klasteri <- cutree(hcIgraci, k = 2) # Odredi broj klastera
print(klasteri)
View(igraci)
knitr::include_graphics("../Foto/klastK9.png")
knitr::include_graphics("../Foto/klastK10.png")
print(lineup)
lineup <- (X=c(-1,-2,8,7,-12,-15,-13,15,21,12,-25,26),
print(lineup)
lineup <- (X=c(-1,-2,8,7,-12,-15,-13,15,21,12,-25,26),
lineup <- (X=c(-1,-2,8,7,-12,-15,-13,15,21,12,-25,26),
lineup <- (X=c(-1,-2,8,7,-12,-15,-13,15,21,12,-25,26),
lineup <- (X =c(-1,-2,8,7,-12,-15,-13,15,21,12,-25,26)
Y =c(1,-3,6,-8,8,0,-10,16,2,-15,1,0))
lineup <- (X =c(-1,-2,8,7,-12,-15,-13,15,21,12,-25,26), Y = c(1,-3,6,-8,8,0,-10,16,2,-15,1,0))
lineup <- data.frame(X =c(-1,-2,8,7,-12,-15,-13,15,21,12,-25,26),
Y = c(1,-3,6,-8,8,0,-10,16,2,-15,1,0))
print(lineup)
model <- kmeans(lineup, centers = 2)
print(model$cluster)
lineupKlasteri <- mutate(lineup, cluster = model$cluster)
print(lineupKlasteri)
head(print(lineupKlasteri),6)
knitr::include_graphics("../Foto/klastK10.png")
knitr::include_graphics("../Foto/klastK11.png")
knitr::include_graphics("../Foto/klastK14.png")
knitr::include_graphics("../Foto/klastK15.png")
model$tot.withinss # Kvaliteta modela
library(purrr)
tot_withinss <- map_dbl(1:10, function(k){
model <- kmeans(x = lineup, centers = k)
model$tot.withinss
})
elbow_df <- data.frame(
k = 1:10,
tot_withinss = tot_withinss
)
print(elbow_df)
head(print(elbow_df),5)
tot_withinss
ggplot(elbow_df, aes(x = k, y = tot_withinss)) +
geom_line() +
scale_x_continuous(breaks = 1:10)
knitr::include_graphics("../Foto/klastS1.png")
knitr::include_graphics("../Foto/klastS2.png")
knitr::include_graphics("../Foto/klastS3.png")
knitr::include_graphics("../Foto/klastS4.png")
knitr::include_graphics("../Foto/klastS5.png")
knitr::include_graphics("../Foto/klastS6.png")
knitr::include_graphics("../Foto/klastS7.png")
knitr::include_graphics("../Foto/klastS8.png")
library(cluster)
pam_k3 <- pam(lineup, k = 3)
pam_k3$silinfo$widths
sil_plot <- silhouette(pam_k3)
plot(sil_plot)
pam_k3$silinfo$avg.width
```{r}
sil_width <- map_dbl(2:10, function(k){
model <- pam(x = lineup, k = k)
model$silinfo$avg.width
})
sil_df <- data.frame(
k = 2:10,
sil_width = sil_width
)
print(sil_df)
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=F#, echo=F, warning=F, message=F
)
# Napravi podatke
visinaTezina <- data.frame(Visina = c(6,6,8),
Tezina = c(200,202,200),
row.names = c(1,2,3))
visinaTezina
knitr::opts_chunk$set(echo = TRUE)
# Napravi podatke
lineup <- data.frame(X =c(-1,-2,8,7,-12,-15,-13,15,21,12,-25,26),
Y = c(1,-3,6,-8,8,0,-10,16,2,-15,1,0))
# Pregledaj podatke
head(print(lineup),6)
# Pregledaj podatke
print(lineup)
knitr::include_graphics("../Foto/klastK10.png")
knitr::include_graphics("../Foto/klastK11.png")
knitr::include_graphics("../Foto/klastS5.png")
devtools::install_github("kassmbara/datarium")
install.packages("datarium")
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=F#, echo=F, warning=F, message=F
)
# Koristimo "marketing" podatkovni skup iz "datarium" paketa
library(datarium) # učitaj paket
data("marketing")
head(marketing,10)
